// <auto-generated />
using System;
using GarageManagementAPI.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarageManagementAPI.Application.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250125142930_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ApproveByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("text");

                    b.Property<string>("CarCondition")
                        .HasColumnType("text");

                    b.Property<string>("CarLicensePlateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("EstimatedAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("ExpectedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointment_id_primary");

                    b.HasIndex("ApproveByEmployeeId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("GarageId");

                    b.HasIndex(new[] { "CustomerEmail" }, "appointment_customeremail_index");

                    b.HasIndex(new[] { "CustomerPhoneNumber", "CustomerEmail" }, "appointment_customerphonenumber_customeremail_index");

                    b.HasIndex(new[] { "CustomerPhoneNumber" }, "appointment_customerphonenumber_index");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentdetail_id_primary");

                    b.HasIndex("ServiceHistoryId");

                    b.HasIndex("UpdateByCustomerId");

                    b.HasIndex("UpdateByEmployeeId");

                    b.HasIndex(new[] { "AppointmentId" }, "appointmentdetail_appointmentid_index");

                    b.ToTable("AppointmentDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentDetailPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentdetailpackage_id_primary");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UpdateByCustomerId");

                    b.HasIndex("UpdateByEmployeeId");

                    b.HasIndex(new[] { "PackageHistoryId", "AppointmentId" }, "appointmentdetailpackage_packagehistoryid_appointmentid_unique")
                        .IsUnique();

                    b.ToTable("AppointmentDetailPackage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentPerDay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountPerDay")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentperday_id_primary");

                    b.ToTable("AppointmentPerDay", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentReplacementPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentreplacementpart_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex("ProductHistoryId");

                    b.HasIndex(new[] { "AppointmentDetailId" }, "appointmentreplacementpart_appointmentdetailid_index");

                    b.ToTable("AppointmentReplacementPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LinkLogo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("brand_id_primary");

                    b.HasIndex(new[] { "BrandName" }, "brand_brandname_unique")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carcategory_id_primary");

                    b.HasIndex(new[] { "Category" }, "carcategory_category_unique")
                        .IsUnique();

                    b.ToTable("CarCategory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarConditionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConditionStage")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carconditionimage_id_primary");

                    b.HasIndex(new[] { "AppointmentDetailId" }, "carconditionimage_appointmentdetailid_index");

                    b.ToTable("CarConditionImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModelYear")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carmodel_id_primary");

                    b.HasIndex(new[] { "BrandId" }, "carmodel_brandid_index");

                    b.HasIndex(new[] { "CarCategoryId" }, "carmodel_carcategoryid_index");

                    b.ToTable("CarModel", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarPartCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carpart_id_primary");

                    b.HasIndex(new[] { "CarPartCategoryId" }, "carpart_carpartcategoryid_index");

                    b.HasIndex(new[] { "PartName" }, "carpart_partname_unique")
                        .IsUnique();

                    b.ToTable("CarPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarPartCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carpartcategory_id_primary");

                    b.HasIndex(new[] { "PartCategory" }, "carpartcategory_partcategory_unique")
                        .IsUnique();

                    b.ToTable("CarPartCategory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CustomerCar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VehicleIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("customercar_id_primary");

                    b.HasIndex("CarModelId");

                    b.HasIndex(new[] { "CreatedByEmployeeId" }, "customercar_createdbyemployeeid_index");

                    b.HasIndex(new[] { "CustomerId" }, "customercar_customerid_index");

                    b.HasIndex(new[] { "LicensePlateNumber" }, "customercar_licenseplatenumber_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "VehicleIdentificationNumber" }, "customercar_vehicleidentificationnumber_unique")
                        .IsUnique();

                    b.ToTable("CustomerCar", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.EmployeeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenIdentification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkPlaceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("WorkplaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("employeeinfo_userid_primary");

                    b.HasIndex(new[] { "CitizenIdentification" }, "employeeinfo_citizenidentification_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "WorkplaceId" }, "employeeinfo_workplaceid_index");

                    b.ToTable("EmployeeInfo", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.EmployeeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("employeeschedule_id_primary");

                    b.HasIndex(new[] { "AppointmentDetailId", "EmployeeId" }, "employeeschedule_appointmentdetailid_employeeid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "AppointmentDetailId" }, "employeeschedule_appointmentdetailid_index");

                    b.HasIndex(new[] { "EmployeeId" }, "employeeschedule_employeeid_index");

                    b.ToTable("EmployeeSchedule", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssued", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedWareHouseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("goodsissued_id_primary");

                    b.HasIndex("CreatedWareHouseManagerId");

                    b.HasIndex("GarageId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GoodsIssued", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssuedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsIssuedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtWareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("goodsissueddetail_id_primary");

                    b.HasIndex(new[] { "GoodsIssuedId" }, "goodsissueddetail_goodsissuedid_index");

                    b.HasIndex(new[] { "ProductAtWareHouseId" }, "goodsissueddetail_productatwarehouseid_index");

                    b.ToTable("GoodsIssuedDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedWarehouseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefereneceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceDistrict")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceProvince")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceWards")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("goodsreceived_id_primary");

                    b.HasIndex("CreatedWarehouseManagerId");

                    b.HasIndex(new[] { "SupplierContactId" }, "goodsreceived_suppliercontactid_index");

                    b.HasIndex(new[] { "WarehouseId" }, "goodsreceived_warehouseid_index");

                    b.ToTable("GoodsReceived", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceivedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("goodsreceiveddetail_id_primary");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "GoodsReceivedId" }, "goodsreceiveddetail_goodsreceivedid_index");

                    b.ToTable("GoodsReceivedDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceType")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("invoice_appointmentid_primary");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GarageId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoicePackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("invoicepackagedetail_id_primary");

                    b.HasIndex("PackageHistoryId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoicepackagedetail_invoiceid_index");

                    b.HasIndex(new[] { "InvoiceId", "PackageHistoryId" }, "invoicepackagedetail_invoiceid_packagehistoryid_unique")
                        .IsUnique();

                    b.ToTable("InvoicePackageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoiceSellProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("invoicesellproduct_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoicesellproduct_invoiceid_index");

                    b.HasIndex(new[] { "ProductHistoryId", "InvoiceId", "ProductAtGarageId" }, "invoicesellproduct_producthistoryid_invoiceid_productatgarageid_unique")
                        .IsUnique();

                    b.ToTable("InvoiceSellProduct", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoiceServiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("invoiceservicedetail_id_primary");

                    b.HasIndex("ServiceHistoryId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoiceservicedetail_invoiceid_index");

                    b.HasIndex(new[] { "InvoiceId", "ServiceHistoryId" }, "invoiceservicedetail_invoiceid_servicehistoryid_unique")
                        .IsUnique();

                    b.ToTable("InvoiceServiceDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("package_id_primary");

                    b.HasIndex(new[] { "CarCategoryId" }, "package_carcategoryid_index");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConditionType")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("int");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("packagecondition_id_primary");

                    b.HasIndex(new[] { "ConditionType", "ConditionValue" }, "packagecondition_conditiontype_conditionvalue_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageId" }, "packagecondition_packageid_index");

                    b.ToTable("PackageCondition", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageDetail", b =>
                {
                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PackageHistoryId", "ServiceId")
                        .HasName("packagedetail_packagehistoryid_serviceid_primary");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageFeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packagefeedback_id_primary");

                    b.HasIndex(new[] { "CustomerId" }, "packagefeedback_customerid_index");

                    b.HasIndex(new[] { "PackageId" }, "packagefeedback_packageid_index");

                    b.ToTable("PackageFeedBack", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int>("TimeUnit")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("ValidityPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("packagehistory_id_primary");

                    b.HasIndex(new[] { "PackageId" }, "packagehistory_packageid_index");

                    b.HasIndex(new[] { "PackageId", "PackagePrice", "ValidityPeriod", "TimeUnit", "UsageLimit" }, "packagehistory_packageid_packageprice_validityperiod_timeunit_usagelimit_unique")
                        .IsUnique();

                    b.ToTable("PackageHistory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packageimage_id_primary");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceAppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsagedCount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("packageusage_id_primary");

                    b.HasIndex("PackageHistoryId");

                    b.HasIndex(new[] { "CustomerCarId" }, "packageusage_customercarid_index");

                    b.HasIndex(new[] { "InvoiceAppointmentId" }, "packageusage_invoiceappointmentid_unique")
                        .IsUnique();

                    b.ToTable("PackageUsage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageUsageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageUsageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packageusagedetail_id_primary");

                    b.HasIndex(new[] { "AppointmentId" }, "packageusagedetail_appointmentid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageUsageId", "AppointmentId" }, "packageusagedetail_packageusageid_appointmentid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageUsageId" }, "packageusagedetail_packageusageid_index");

                    b.ToTable("PackageUsageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProductBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("product_id_primary");

                    b.HasIndex(new[] { "BrandId" }, "product_brandid_index");

                    b.HasIndex(new[] { "ProductBarcode" }, "product_productbarcode_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductCategoryId" }, "product_productcategoryid_index");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtGarage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProductBarcodeAtGarage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productatgarage_goodsissueddetailid_primary");

                    b.ToTable("ProductAtGarage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productatwarehouse_goodsreceiveddetailid_primary");

                    b.ToTable("ProductAtWarehouse", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productcategory_id_primary");

                    b.HasIndex(new[] { "Category" }, "productcategory_category_unique")
                        .IsUnique();

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("producthistory_id_primary");

                    b.HasIndex(new[] { "ProductId" }, "producthistory_productid_index");

                    b.ToTable("ProductHistory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productimage_id_primary");

                    b.HasIndex(new[] { "ProductId" }, "productimage_productid_index");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ReplacementPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id")
                        .HasName("replacementpart_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex("ProductHistoryId");

                    b.HasIndex(new[] { "InvoiceDetailId" }, "replacementpart_invoiceappointmentdetailid_index");

                    b.HasIndex(new[] { "InvoiceDetailId", "ProductHistoryId", "ProductAtGarageId" }, "replacementpart_invoiceappointmentdetailid_producthistoryid_productatgarageid_unique")
                        .IsUnique();

                    b.ToTable("ReplacementPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkNature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("service_id_primary");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex(new[] { "CarPartId" }, "service_carpartid_index");

                    b.HasIndex(new[] { "ServiceCategory", "WorkNature", "Action", "CarCategoryId" }, "service_servicecategory_worknature_action_carcategoryid_unique")
                        .IsUnique();

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceFeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("servicefeedback_id_primary");

                    b.HasIndex(new[] { "CustomerId" }, "servicefeedback_customerid_index");

                    b.HasIndex(new[] { "ServiceId" }, "servicefeedback_serviceid_index");

                    b.ToTable("ServiceFeedBack", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("servicehistory_id_primary");

                    b.HasIndex(new[] { "ServiceId" }, "servicehistory_serviceid_index");

                    b.ToTable("ServiceHistory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("serviceimage_id_primary");

                    b.HasIndex(new[] { "ServiceId" }, "serviceimage_serviceid_index");

                    b.ToTable("ServiceImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("SupplierCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("supplier_id_primary");

                    b.HasIndex(new[] { "Address", "Province", "District", "Wards" }, "supplier_address_province_district_wards_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "supplier_name_unique")
                        .IsUnique();

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.SupplierContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("suppliercontact_id_primary");

                    b.HasIndex(new[] { "SupplierId" }, "suppliercontact_supplierid_index");

                    b.ToTable("SupplierContact", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id")
                        .HasName("users_id_primary");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "users_phonenumber_unique")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex(new[] { "UserName" }, "users_username_unique")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Workplace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkplaceType")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("workplace_id_primary");

                    b.HasIndex(new[] { "Address", "Province", "District", "Wards" }, "workplace_address_province_district_wards_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "workplace_name_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "workplace_phonenumber_unique")
                        .IsUnique();

                    b.ToTable("Workplace", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProductCarModel", b =>
                {
                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarModelId", "ProductId")
                        .HasName("productcarmodel_carmodelid_productid_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarModel", (string)null);
                });

            modelBuilder.Entity("ProductCarPart", b =>
                {
                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarPartId", "ProductId")
                        .HasName("productcarpart_carpartid_productid_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Appointment", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "ApproveByEmployee")
                        .WithMany("Appointments")
                        .HasForeignKey("ApproveByEmployeeId")
                        .HasConstraintName("appointment_approvebyemployeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarModel", "CarModel")
                        .WithMany("Appointments")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("appointment_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Garage")
                        .WithMany("Appointments")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("appointment_garageid_foreign");

                    b.Navigation("ApproveByEmployee");

                    b.Navigation("CarModel");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetail_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ServiceHistory", "ServiceHistory")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServiceHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetail_servicehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "UpdateByCustomer")
                        .WithMany("AppointmentDetailUpdateByCustomers")
                        .HasForeignKey("UpdateByCustomerId")
                        .HasConstraintName("appointmentdetail_updatebycustomerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "UpdateByEmployee")
                        .WithMany("AppointmentDetailUpdateByEmployees")
                        .HasForeignKey("UpdateByEmployeeId")
                        .HasConstraintName("appointmentdetail_updatebyemployeeid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("ServiceHistory");

                    b.Navigation("UpdateByCustomer");

                    b.Navigation("UpdateByEmployee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentDetailPackage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Appointment", "Appointment")
                        .WithMany("AppointmentDetailPackages")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetailpackage_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.PackageHistory", "PackageHistory")
                        .WithMany("AppointmentDetailPackages")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetailpackage_packagehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "UpdateByCustomer")
                        .WithMany("AppointmentDetailPackageUpdateByCustomers")
                        .HasForeignKey("UpdateByCustomerId")
                        .HasConstraintName("appointmentdetailpackage_updatebycustomerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "UpdateByEmployee")
                        .WithMany("AppointmentDetailPackageUpdateByEmployees")
                        .HasForeignKey("UpdateByEmployeeId")
                        .HasConstraintName("appointmentdetailpackage_updatebyemployeeid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("PackageHistory");

                    b.Navigation("UpdateByCustomer");

                    b.Navigation("UpdateByEmployee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentReplacementPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.AppointmentDetail", "AppointmentDetail")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_appointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductAtGarage", "ProductAtGarage")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductHistory", "ProductHistory")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_producthistoryid_foreign");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarConditionImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.AppointmentDetail", "AppointmentDetail")
                        .WithMany("CarConditionImages")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("carconditionimage_appointmentdetailid_foreign");

                    b.Navigation("AppointmentDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Brand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("carmodel_brandid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarCategory", "CarCategory")
                        .WithMany("CarModels")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("carmodel_carcategoryid_foreign");

                    b.Navigation("Brand");

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarPartCategory", "CarPartCategory")
                        .WithMany("CarParts")
                        .HasForeignKey("CarPartCategoryId")
                        .IsRequired()
                        .HasConstraintName("carpart_carpartcategoryid_foreign");

                    b.Navigation("CarPartCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CustomerCar", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarModel", "CarModel")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("customercar_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "CreatedByEmployee")
                        .WithMany("CustomerCarCreatedByEmployees")
                        .HasForeignKey("CreatedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("customercar_createdbyemployeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Customer")
                        .WithMany("CustomerCarCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("customercar_customerid_foreign");

                    b.Navigation("CarModel");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.EmployeeInfo", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "User")
                        .WithOne("EmployeeInfo")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.EmployeeInfo", "Id")
                        .IsRequired()
                        .HasConstraintName("employeeinfo_userid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Workplace")
                        .WithMany("EmployeeInfos")
                        .HasForeignKey("WorkplaceId")
                        .IsRequired()
                        .HasConstraintName("employeeinfo_workplaceid_foreign");

                    b.Navigation("User");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.EmployeeSchedule", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.AppointmentDetail", "AppointmentDetail")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("employeeschedule_appointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("employeeschedule_employeeid_foreign");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssued", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "CreatedWareHouseManager")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("CreatedWareHouseManagerId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_createdwarehousemanagerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Garage")
                        .WithMany("GoodsIssuedGarages")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_garageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Warehouse")
                        .WithMany("GoodsIssuedWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_warehouseid_foreign");

                    b.Navigation("CreatedWareHouseManager");

                    b.Navigation("Garage");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssuedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.GoodsIssued", "GoodsIssued")
                        .WithMany("GoodsIssuedDetails")
                        .HasForeignKey("GoodsIssuedId")
                        .IsRequired()
                        .HasConstraintName("goodsissueddetail_goodsissuedid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductAtWarehouse", "ProductAtWareHouse")
                        .WithMany("GoodsIssuedDetails")
                        .HasForeignKey("ProductAtWareHouseId")
                        .IsRequired()
                        .HasConstraintName("goodsissueddetail_productatwarehouseid_foreign");

                    b.Navigation("GoodsIssued");

                    b.Navigation("ProductAtWareHouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceived", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "CreatedWarehouseManager")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("CreatedWarehouseManagerId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_createdwarehousemanagerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.SupplierContact", "SupplierContact")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("SupplierContactId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_suppliercontactid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Warehouse")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_warehouseid_foreign");

                    b.Navigation("CreatedWarehouseManager");

                    b.Navigation("SupplierContact");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceivedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.GoodsReceived", "GoodsReceived")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("GoodsReceivedId")
                        .IsRequired()
                        .HasConstraintName("goodsreceiveddetail_goodsreceivedid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Product", "Product")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("goodsreceiveddetail_productid_foreign");

                    b.Navigation("GoodsReceived");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Invoice", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Customer")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("invoice_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Employee")
                        .WithMany("InvoiceEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("invoice_employeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Workplace", "Garage")
                        .WithMany("Invoices")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("invoice_garageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Appointment", "Appointment")
                        .WithOne("Invoice")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.Invoice", "Id")
                        .IsRequired()
                        .HasConstraintName("invoice_appointmentid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoicePackageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Invoice", "Invoice")
                        .WithMany("InvoicePackageDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoicepackagedetail_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.PackageHistory", "PackageHistory")
                        .WithMany("InvoicePackageDetails")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoicepackagedetail_packagehistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoiceSellProduct", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Invoice", "Invoice")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductAtGarage", "ProductAtGarage")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductHistory", "ProductHistory")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_producthistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoiceServiceDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Invoice", "Invoice")
                        .WithMany("InvoiceServiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoiceservicedetail_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ServiceHistory", "ServiceHistory")
                        .WithMany("InvoiceServiceDetails")
                        .HasForeignKey("ServiceHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoiceservicedetail_servicehistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Package", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarCategory", "CarCategory")
                        .WithMany("Packages")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("package_carcategoryid_foreign");

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageCondition", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Package", "Package")
                        .WithMany("PackageConditions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagecondition_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.PackageHistory", "PackageHistory")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("packagedetail_packagehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Service", "Service")
                        .WithMany("PackageDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("packagedetail_serviceid_foreign");

                    b.Navigation("PackageHistory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageFeedBack", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Customer")
                        .WithMany("PackageFeedBacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("packagefeedback_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Package", "Package")
                        .WithMany("PackageFeedBacks")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagefeedback_packageid_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Package", "Package")
                        .WithMany("PackageHistories")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagehistory_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Package", "Package")
                        .WithMany("PackageImages")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packageimage_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageUsage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CustomerCar", "CustomerCar")
                        .WithMany("PackageUsages")
                        .HasForeignKey("CustomerCarId")
                        .IsRequired()
                        .HasConstraintName("packageusage_customercarid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Invoice", "InvoiceAppointment")
                        .WithOne("PackageUsage")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.PackageUsage", "InvoiceAppointmentId")
                        .IsRequired()
                        .HasConstraintName("packageusage_invoiceappointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.PackageHistory", "PackageHistory")
                        .WithMany("PackageUsages")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("packageusage_packagehistoryid_foreign");

                    b.Navigation("CustomerCar");

                    b.Navigation("InvoiceAppointment");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageUsageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Appointment", "Appointment")
                        .WithOne("PackageUsageDetail")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.PackageUsageDetail", "AppointmentId")
                        .IsRequired()
                        .HasConstraintName("packageusagedetail_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.PackageUsage", "PackageUsage")
                        .WithMany("PackageUsageDetails")
                        .HasForeignKey("PackageUsageId")
                        .IsRequired()
                        .HasConstraintName("packageusagedetail_packageusageid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Product", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("product_brandid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("product_productcategoryid_foreign");

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtGarage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.GoodsIssuedDetail", "GoodsIssuedDetail")
                        .WithOne("ProductAtGarage")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.ProductAtGarage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("productatgarage_goodsissueddetailid_foreign");

                    b.Navigation("GoodsIssuedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtWarehouse", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.GoodsReceivedDetail", "GoodsReceivedDetail")
                        .WithOne("ProductAtWarehouse")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.ProductAtWarehouse", "Id")
                        .IsRequired()
                        .HasConstraintName("productatwarehouse_goodsreceiveddetailid_foreign");

                    b.Navigation("GoodsReceivedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Product", "Product")
                        .WithMany("ProductHistories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("producthistory_productid_foreign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productimage_productid_foreign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ReplacementPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.InvoiceServiceDetail", "InvoiceDetail")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("InvoiceDetailId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_invoiceappointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductAtGarage", "ProductAtGarage")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.ProductHistory", "ProductHistory")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_producthistoryid_foreign");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Service", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarCategory", "CarCategory")
                        .WithMany("Services")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("service_carcategoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarPart", "CarPart")
                        .WithMany("Services")
                        .HasForeignKey("CarPartId")
                        .IsRequired()
                        .HasConstraintName("service_carpartid_foreign");

                    b.Navigation("CarCategory");

                    b.Navigation("CarPart");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceFeedBack", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", "Customer")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("servicefeedback_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Service", "Service")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servicefeedback_serviceid_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Service", "Service")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servicehistory_serviceid_foreign");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Service", "IdNavigation")
                        .WithOne("ServiceImage")
                        .HasForeignKey("GarageManagementAPI.Entities.NewModels.ServiceImage", "Id")
                        .IsRequired()
                        .HasConstraintName("serviceimage_id_foreign");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.SupplierContact", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Supplier", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("suppliercontact_supplierid_foreign");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductCarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarModel", null)
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("productcarmodel_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productcarmodel_productid_foreign");
                });

            modelBuilder.Entity("ProductCarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.NewModels.CarPart", null)
                        .WithMany()
                        .HasForeignKey("CarPartId")
                        .IsRequired()
                        .HasConstraintName("productcarpart_carpartid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.NewModels.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productcarpart_productid_foreign");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Appointment", b =>
                {
                    b.Navigation("AppointmentDetailPackages");

                    b.Navigation("AppointmentDetails");

                    b.Navigation("Invoice");

                    b.Navigation("PackageUsageDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.AppointmentDetail", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("CarConditionImages");

                    b.Navigation("EmployeeSchedules");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Brand", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarCategory", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Packages");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarModel", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerCars");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarPart", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CarPartCategory", b =>
                {
                    b.Navigation("CarParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.CustomerCar", b =>
                {
                    b.Navigation("PackageUsages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssued", b =>
                {
                    b.Navigation("GoodsIssuedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsIssuedDetail", b =>
                {
                    b.Navigation("ProductAtGarage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceived", b =>
                {
                    b.Navigation("GoodsReceivedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.GoodsReceivedDetail", b =>
                {
                    b.Navigation("ProductAtWarehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Invoice", b =>
                {
                    b.Navigation("InvoicePackageDetails");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("InvoiceServiceDetails");

                    b.Navigation("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.InvoiceServiceDetail", b =>
                {
                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Package", b =>
                {
                    b.Navigation("PackageConditions");

                    b.Navigation("PackageFeedBacks");

                    b.Navigation("PackageHistories");

                    b.Navigation("PackageImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageHistory", b =>
                {
                    b.Navigation("AppointmentDetailPackages");

                    b.Navigation("InvoicePackageDetails");

                    b.Navigation("PackageDetails");

                    b.Navigation("PackageUsages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.PackageUsage", b =>
                {
                    b.Navigation("PackageUsageDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Product", b =>
                {
                    b.Navigation("GoodsReceivedDetails");

                    b.Navigation("ProductHistories");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtGarage", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductAtWarehouse", b =>
                {
                    b.Navigation("GoodsIssuedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ProductHistory", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Service", b =>
                {
                    b.Navigation("PackageDetails");

                    b.Navigation("ServiceFeedBacks");

                    b.Navigation("ServiceHistories");

                    b.Navigation("ServiceImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.ServiceHistory", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("InvoiceServiceDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Supplier", b =>
                {
                    b.Navigation("SupplierContacts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.SupplierContact", b =>
                {
                    b.Navigation("GoodsReceiveds");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.User", b =>
                {
                    b.Navigation("AppointmentDetailPackageUpdateByCustomers");

                    b.Navigation("AppointmentDetailPackageUpdateByEmployees");

                    b.Navigation("AppointmentDetailUpdateByCustomers");

                    b.Navigation("AppointmentDetailUpdateByEmployees");

                    b.Navigation("Appointments");

                    b.Navigation("CustomerCarCreatedByEmployees");

                    b.Navigation("CustomerCarCustomers");

                    b.Navigation("EmployeeInfo");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("GoodsIssueds");

                    b.Navigation("GoodsReceiveds");

                    b.Navigation("InvoiceCustomers");

                    b.Navigation("InvoiceEmployees");

                    b.Navigation("PackageFeedBacks");

                    b.Navigation("ServiceFeedBacks");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.NewModels.Workplace", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeeInfos");

                    b.Navigation("GoodsIssuedGarages");

                    b.Navigation("GoodsIssuedWarehouses");

                    b.Navigation("GoodsReceiveds");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
