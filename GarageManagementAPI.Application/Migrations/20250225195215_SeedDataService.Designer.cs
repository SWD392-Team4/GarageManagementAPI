// <auto-generated />
using System;
using GarageManagementAPI.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarageManagementAPI.Application.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250225195215_SeedDataService")]
    partial class SeedDataService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset?>("ActualAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ApproveByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("text");

                    b.Property<string>("CarCondition")
                        .HasColumnType("text");

                    b.Property<string>("CarLicensePlateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("EstimatedAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointment_id_primary");

                    b.HasIndex("ApproveByEmployeeId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("GarageId");

                    b.HasIndex(new[] { "CustomerEmail" }, "appointment_customeremail_index");

                    b.HasIndex(new[] { "CustomerPhoneNumber", "CustomerEmail" }, "appointment_customerphonenumber_customeremail_index");

                    b.HasIndex(new[] { "CustomerPhoneNumber" }, "appointment_customerphonenumber_index");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UpdateByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentdetail_id_primary");

                    b.HasIndex("ServiceHistoryId");

                    b.HasIndex("UpdateByCustomerId");

                    b.HasIndex("UpdateByEmployeeId");

                    b.HasIndex(new[] { "AppointmentId" }, "appointmentdetail_appointmentid_index");

                    b.ToTable("AppointmentDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetailPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UpdateByCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentdetailpackage_id_primary");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UpdateByCustomerId");

                    b.HasIndex("UpdateByEmployeeId");

                    b.HasIndex(new[] { "PackageHistoryId", "AppointmentId" }, "appointmentdetailpackage_packagehistoryid_appointmentid_unique")
                        .IsUnique();

                    b.ToTable("AppointmentDetailPackage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentPerDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("CountPerDay")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentperday_id_primary");

                    b.ToTable("AppointmentPerDay", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentReplacementPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("appointmentreplacementpart_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex("ProductHistoryId");

                    b.HasIndex(new[] { "AppointmentDetailId" }, "appointmentreplacementpart_appointmentdetailid_index");

                    b.ToTable("AppointmentReplacementPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("brand_id_primary");

                    b.HasIndex(new[] { "BrandName" }, "brand_brandname_unique")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47cc8b19-70ce-46f3-aef9-eb933eea2182"),
                            BrandName = "Toyota",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/jh1rqnn0oavjilladcuy",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421861/Brand/jh1rqnn0oavjilladcuy.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("30e45fc3-a2d1-4006-be2b-9de2b1c5130c"),
                            BrandName = "Ford",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/qb6avmc6okdc39zg0uzz",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421924/Brand/qb6avmc6okdc39zg0uzz.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("23e128b8-73fe-4e74-bfdf-97d82911af47"),
                            BrandName = "Volkswagen",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/gahdhvt1wvon18doxhvy",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421976/Brand/gahdhvt1wvon18doxhvy.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("14cc790e-323d-4020-b1ac-5ff5bb96336d"),
                            BrandName = "Honda",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/kx3xsj26x6czy664rjrx",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422018/Brand/kx3xsj26x6czy664rjrx.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("793ed2e4-eba2-407e-a814-ab8d5ddcdfc7"),
                            BrandName = "Chevrolet",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/lovrlrwiei2xukzv6zq3",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422071/Brand/lovrlrwiei2xukzv6zq3.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4224e14b-fce0-47cb-904f-0c7c286d45f8"),
                            BrandName = "Nissan",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/qhnes6tgs3i6nsbft8dk",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422160/Brand/qhnes6tgs3i6nsbft8dk.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            BrandName = "BMW",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/akxxqktdh9mhylbhywxj",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422278/Brand/akxxqktdh9mhylbhywxj.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f7f6b4fc-0e88-4cb6-af7e-c0834bfb2b2c"),
                            BrandName = "Mercedes-Benz",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/nkhahhkmagpxarghm1us",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422229/Brand/nkhahhkmagpxarghm1us.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4d8aaaa6-448a-431c-a50f-a313dba5b3e5"),
                            BrandName = "Audi",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/biocmnahytbpqzvdtj3k",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422333/Brand/biocmnahytbpqzvdtj3k.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1f13210f-6d0b-4cb9-86b9-fc0fa5898afd"),
                            BrandName = "Hyundai",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/n4vgf2iu2xlddjq0fies",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422392/Brand/n4vgf2iu2xlddjq0fies.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0131e761-bdeb-4fd0-8aba-b3cc0769d0c4"),
                            BrandName = "Kia",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/wfmlm6uwd5hnguwpbioj",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422439/Brand/wfmlm6uwd5hnguwpbioj.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("84062c49-1fe2-4b97-86c4-49e4d0f5449b"),
                            BrandName = "Subaru",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/dpq3tgrogw3ilo6jwqoz",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421768/Brand/dpq3tgrogw3ilo6jwqoz.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2c74b21a-5ec4-4dce-b376-b6b0601d7a84"),
                            BrandName = "Lexus",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/qmp6fgd6qktgt52viovi",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422492/Brand/qmp6fgd6qktgt52viovi.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("350b60f4-40fb-499b-9358-3a06ee2ff5f7"),
                            BrandName = "Dodge",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/sy90i7nnlc45r3l9xxff",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422553/Brand/sy90i7nnlc45r3l9xxff.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("855f8a55-c9d0-4532-81ee-6da2bd0db1f6"),
                            BrandName = "Jeep",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/xqggwm0nnswweukoaoxd",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423926/Brand/xqggwm0nnswweukoaoxd.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            BrandName = "Cadillac",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/m5yackgrajh62hnouttj",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423856/Brand/m5yackgrajh62hnouttj.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4b3039f3-b460-46be-aa39-e43d4c29af19"),
                            BrandName = "GMC",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/kchfjjavlom9a4qnywvg",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423772/Brand/kchfjjavlom9a4qnywvg.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            BrandName = "Mitsubishi",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/lyu7mi3lyfunwizhju9r",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423615/Brand/lyu7mi3lyfunwizhju9r.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            BrandName = "Porsche",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/sbmjof2ugzzsuwoyj7r5",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423565/Brand/sbmjof2ugzzsuwoyj7r5.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            BrandName = "Volvo",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/n3dc1tql2hvqydjaekzl",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423480/Brand/n3dc1tql2hvqydjaekzl.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            BrandName = "Land Rover",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/ulvsdpqvmfvib7i6wxos",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423422/Brand/ulvsdpqvmfvib7i6wxos.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e99dfd5c-ffe7-454d-9ae2-c4622eaa8200"),
                            BrandName = "Mazda",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/kkxeemoptvcenvt86l3w",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423366/Brand/kkxeemoptvcenvt86l3w.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("71bd8b35-0d22-4783-8638-78eb48bd5629"),
                            BrandName = "Infiniti",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/vkk2c8pgwgsdov9omkyd",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423282/Brand/vkk2c8pgwgsdov9omkyd.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("91f09ff2-24ed-4d60-b3c5-5e76204a90ff"),
                            BrandName = "Buick",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/pbdy8azpl3zaj57jqsjh",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423195/Brand/pbdy8azpl3zaj57jqsjh.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("867a1f57-a7dc-4d8a-95f0-9b1e1b086809"),
                            BrandName = "Acura",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/mkyjol2tpt7jhjmaofaz",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423136/Brand/mkyjol2tpt7jhjmaofaz.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b3126c73-0e1e-40fd-8dec-f7c4d2789dd9"),
                            BrandName = "Fiat",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/ifubhf1jsnt9k6xkwhv7",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423064/Brand/ifubhf1jsnt9k6xkwhv7.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("306fd99b-7914-4c4d-a92b-f3d998f3b772"),
                            BrandName = "Mini",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/w6ca9jl8nxdrtsluak70",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422988/Brand/w6ca9jl8nxdrtsluak70.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e9a0d0d3-3a43-406a-b465-b630c5d93f6f"),
                            BrandName = "Chrysler",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/umb5c1sp4044krzzpo88",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422880/Brand/umb5c1sp4044krzzpo88.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("22d61e55-50e5-4dcd-bf40-209fc2fcae12"),
                            BrandName = "Tesla",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/tmplel6lrqlfazu1bhy0",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740423698/Brand/tmplel6lrqlfazu1bhy0.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("72d247fb-5249-4ce1-a400-fce2559e7db0"),
                            BrandName = "Renault",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/dtvvsfc8hclugj3rt6fi",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422660/Brand/dtvvsfc8hclugj3rt6fi.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e5e319f9-ef2a-4ab7-a847-5f0d3c7a1caf"),
                            BrandName = "Peugeot",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/diqhpfvayh4esj3vion2",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740422609/Brand/diqhpfvayh4esj3vion2.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("537c1813-334d-41c0-987b-0ed1509475f7"),
                            BrandName = "Suzuki",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/elsbmo9uhii4prclhfx2",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421766/Brand/elsbmo9uhii4prclhfx2.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2254581b-c244-4c41-b5e4-c353629c2105"),
                            BrandName = "Skoda",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/zndqli8qgxhwjmr7fyo5",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421656/Brand/zndqli8qgxhwjmr7fyo5.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("97b8ca2f-9784-4262-a57e-5695f3f0f642"),
                            BrandName = "Opel",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/zkby3nlbmv7path5ujwj",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421597/Brand/zkby3nlbmv7path5ujwj.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7d0e4fb5-6e8e-48fc-ba2b-daa570f5f96f"),
                            BrandName = "Alfa Romeo",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/ot1xglmql3kdxpdbwcte",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421522/Brand/ot1xglmql3kdxpdbwcte.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("fa7fab24-c298-43cf-b990-341b29a02996"),
                            BrandName = "Saab",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/lexnrqalxuzivogd6mov",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421444/Brand/lexnrqalxuzivogd6mov.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6a927f4f-cc77-4d6d-963f-96a14a6a4fa9"),
                            BrandName = "Genesis",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/bn8lek9t1qielpj33asx",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421364/Brand/bn8lek9t1qielpj33asx.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6ebc86c7-82e2-4ce4-b613-ebaac626bd18"),
                            BrandName = "Lincoln",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/dvxwxwkt98k2vm237hb3",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421296/Brand/dvxwxwkt98k2vm237hb3.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0be257e7-856d-48d6-ab5a-f984a75b67d5"),
                            BrandName = "Isuzu",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/zrlnucqkikvx4necltgs",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421187/Brand/zrlnucqkikvx4necltgs.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ff884ca0-1e63-4bc1-84a1-4048a6eb627e"),
                            BrandName = "Bentley",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/uu8ru4pxd9lywnclld9y",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421127/Brand/uu8ru4pxd9lywnclld9y.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("8d86d786-c02d-43a6-9b3f-3ef15761ba71"),
                            BrandName = "Aston Martin",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/hnposen4390ckqokcgcq",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740421051/Brand/hnposen4390ckqokcgcq.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3c18fcda-19de-42ee-88fa-7f9a5c60268f"),
                            BrandName = "Maserati",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/dcfpdtrz6pqk5b7rkdfn",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420549/Brand/dcfpdtrz6pqk5b7rkdfn.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("da9ca2f3-3a68-4311-b189-cc99c3fcebaa"),
                            BrandName = "Jaguar",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/jbn02u6cdkbhr9suovy1",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420465/Brand/jbn02u6cdkbhr9suovy1.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d263567a-41b2-407d-b40d-6bad18eb32ca"),
                            BrandName = "Ferrari",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/k8qf8xzk746w5ff9j6wx",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420390/Brand/k8qf8xzk746w5ff9j6wx.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("61c63482-0890-497e-9013-6c1509e819eb"),
                            BrandName = "Lamborghini",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/yjzqo0gcbjye6j78cfff",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420327/Brand/yjzqo0gcbjye6j78cfff.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("04d6430b-5665-4a0b-b33f-f782d5da2a58"),
                            BrandName = "Bugatti",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/x1iiioelr1eduzvlz6gz",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420222/Brand/x1iiioelr1eduzvlz6gz.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b9333f92-0e83-4343-973a-760182aea47e"),
                            BrandName = "McLaren",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/cpxc269y35mhr8pdijlr",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420144/Brand/cpxc269y35mhr8pdijlr.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("adae589c-555f-48ac-9925-71fa96fa3d88"),
                            BrandName = "Rolls-Royce",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/jmluhi20qavru6lcvpvc",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740420078/Brand/jmluhi20qavru6lcvpvc.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7a021389-57ea-453d-b194-3c692735671d"),
                            BrandName = "Pagani",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/hmvywzznk4hecggkxi3p",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/v1740419988/Brand/hmvywzznk4hecggkxi3p.png",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("51ae4906-854f-4a0a-8629-a0ba2656b9b9"),
                            BrandName = "Koenigsegg",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LogoId = "Brand/jvcdennahy5k7y8tgcin",
                            LogoLink = "https://res.cloudinary.com/dt2b5qfoe/image/upload/f_auto,q_auto/v1/Brand/jvcdennahy5k7y8tgcin",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carcategory_id_primary");

                    b.HasIndex(new[] { "Category" }, "carcategory_category_unique")
                        .IsUnique();

                    b.ToTable("CarCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            Category = "Sedan",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A sedan is a passenger car with a three-box configuration (engine, passenger, cargo) that offers comfort and efficiency for daily commuting.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("983fba7a-11b2-4cdc-8ef0-64ddf6dfbfc4"),
                            Category = "Hatchback",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A hatchback features a rear door that swings upward, providing versatile cargo space while maintaining a compact footprint.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5191690b-1d10-476e-b4f5-4044218e64c2"),
                            Category = "Coupe",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A coupe is a two-door car known for its sporty design and performance, often emphasizing style over practicality.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("506b4f2f-68f7-4b69-ab81-1242de996a18"),
                            Category = "Convertible",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A convertible offers a retractable roof for open-air driving, blending the appeal of sporty performance with leisure versatility.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("13f81bcb-5943-4cfe-9a1f-c38c9dac0969"),
                            Category = "Station Wagon / Estate",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A station wagon (estate) features extended cargo space via a rear liftgate, making it ideal for families and long trips.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            Category = "SUV (Sport Utility Vehicle)",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "SUVs offer a high driving position, ample cargo space, and often off-road capability, making them versatile for various terrains.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("89bd23de-98f2-4de2-a753-403789911119"),
                            Category = "Crossover",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A crossover blends features of SUVs and sedans, offering a balance of comfort, efficiency, and a modern design.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1d25e83b-925e-472a-89d9-38c499dbfdea"),
                            Category = "Minivan / MPV",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Minivans (or MPVs) are designed for family transport with spacious interiors, sliding doors, and flexible seating arrangements.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d904d7f0-674a-48dd-ae45-794d8e257583"),
                            Category = "Pickup Truck",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Pickup trucks are built for utility with a separate cargo bed, robust performance for hauling and towing, and off-road potential.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            Category = "Sports Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sports cars are engineered for high performance and agility, providing an exhilarating driving experience with a focus on speed.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            Category = "Luxury Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Luxury cars offer premium comfort, cutting-edge technology, and superior craftsmanship for a refined and sophisticated driving experience.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b8e9b4d0-8b60-451a-9810-1132482a0d92"),
                            Category = "Electric Vehicle (EV)",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Electric vehicles are powered solely by electric motors and batteries, providing a sustainable and energy-efficient alternative to traditional fuel.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("961975c1-3dd5-4ed0-b260-b324b1c32eed"),
                            Category = "Hybrid Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Hybrid cars combine a conventional internal combustion engine with an electric motor, boosting fuel efficiency and reducing emissions.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a0ded8b7-8094-4ece-8cf7-d1670080ef60"),
                            Category = "Roadster",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Roadsters are lightweight, two-seater cars designed for spirited driving and open-air enjoyment, emphasizing agility and performance.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("48b990a0-cce6-4d09-9a7e-e6d1a76bdb46"),
                            Category = "Muscle Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Muscle cars are characterized by their powerful engines and aggressive styling, designed for high performance and an exhilarating drive.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5aa5a48b-686e-426e-a54e-c5e59bbc7373"),
                            Category = "Off-Road Vehicle",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Off-road vehicles are engineered with high ground clearance and durable suspension systems, built to tackle rough terrain and challenging environments.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            Category = "Compact Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Compact cars are small, fuel-efficient vehicles designed for city driving while offering practicality for everyday use.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("fc000760-6615-4f3b-96cc-7607ba6609a8"),
                            Category = "Subcompact Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Subcompact cars are even smaller than compact models, offering excellent maneuverability and efficiency for urban environments.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            Category = "Mid-Size Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Mid-size cars balance space, comfort, and efficiency, providing versatility for both personal and family use.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            Category = "Full-Size Car",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Full-size cars offer maximum interior space and premium comfort, ideal for long-distance travel and upscale driving experiences.",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarConditionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConditionStage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carconditionimage_id_primary");

                    b.HasIndex(new[] { "AppointmentDetailId" }, "carconditionimage_appointmentdetailid_index");

                    b.ToTable("CarConditionImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("ModelYear")
                        .HasMaxLength(255)
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carmodel_id_primary");

                    b.HasIndex("BrandId", "CarCategoryId", "ModelName", "ModelYear")
                        .IsUnique();

                    b.HasIndex(new[] { "BrandId" }, "carmodel_brandid_index");

                    b.HasIndex(new[] { "CarCategoryId" }, "carmodel_carcategoryid_index");

                    b.ToTable("CarModel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f56523e-903c-4dc4-a1a8-df7730bc1ccd"),
                            BrandId = new Guid("47cc8b19-70ce-46f3-aef9-eb933eea2182"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Corolla",
                            ModelYear = new DateOnly(1966, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c062a7b0-8bc4-43ff-af1b-14ce393f89b3"),
                            BrandId = new Guid("47cc8b19-70ce-46f3-aef9-eb933eea2182"),
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Camry",
                            ModelYear = new DateOnly(1982, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e63c596e-0889-453d-8772-8918ffec7bb9"),
                            BrandId = new Guid("30e45fc3-a2d1-4006-be2b-9de2b1c5130c"),
                            CarCategoryId = new Guid("48b990a0-cce6-4d09-9a7e-e6d1a76bdb46"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Mustang",
                            ModelYear = new DateOnly(1964, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0b079daa-528a-4a2d-bff4-c33c093c7f95"),
                            BrandId = new Guid("30e45fc3-a2d1-4006-be2b-9de2b1c5130c"),
                            CarCategoryId = new Guid("d904d7f0-674a-48dd-ae45-794d8e257583"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "F-150",
                            ModelYear = new DateOnly(1975, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e3baed85-5ab4-43b0-8648-bde97d1a27f9"),
                            BrandId = new Guid("23e128b8-73fe-4e74-bfdf-97d82911af47"),
                            CarCategoryId = new Guid("983fba7a-11b2-4cdc-8ef0-64ddf6dfbfc4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Golf",
                            ModelYear = new DateOnly(1974, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("078bf0ae-414f-4bd3-9880-4cbef3ed1d69"),
                            BrandId = new Guid("23e128b8-73fe-4e74-bfdf-97d82911af47"),
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Passat",
                            ModelYear = new DateOnly(1973, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("444cae6b-9521-4997-8619-21d8628cc14f"),
                            BrandId = new Guid("14cc790e-323d-4020-b1ac-5ff5bb96336d"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Civic",
                            ModelYear = new DateOnly(1972, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("726e5e9e-1fdf-4a12-b307-2b07cc3cac2e"),
                            BrandId = new Guid("14cc790e-323d-4020-b1ac-5ff5bb96336d"),
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Accord",
                            ModelYear = new DateOnly(1976, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("57c0e845-7c0e-436a-a458-4166b8bf87e8"),
                            BrandId = new Guid("793ed2e4-eba2-407e-a814-ab8d5ddcdfc7"),
                            CarCategoryId = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Impala",
                            ModelYear = new DateOnly(1958, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e41eed79-a74e-4f3e-b73b-8f75a73b9eef"),
                            BrandId = new Guid("793ed2e4-eba2-407e-a814-ab8d5ddcdfc7"),
                            CarCategoryId = new Guid("48b990a0-cce6-4d09-9a7e-e6d1a76bdb46"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Camaro",
                            ModelYear = new DateOnly(1966, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f7aceb18-a3f6-441f-a243-78d65dea2520"),
                            BrandId = new Guid("4224e14b-fce0-47cb-904f-0c7c286d45f8"),
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Altima",
                            ModelYear = new DateOnly(1992, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("fa8da65d-fa4c-4382-9dfa-2a550a3e7633"),
                            BrandId = new Guid("4224e14b-fce0-47cb-904f-0c7c286d45f8"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "GT-R",
                            ModelYear = new DateOnly(2007, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6869ab0a-21e1-4232-a060-eb01662e70cd"),
                            BrandId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "3 Series",
                            ModelYear = new DateOnly(1975, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a1575758-cb4b-4389-9b09-416dc9faff00"),
                            BrandId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "X5",
                            ModelYear = new DateOnly(1999, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5391d472-b17f-4edc-b0a0-97a825d08037"),
                            BrandId = new Guid("f7f6b4fc-0e88-4cb6-af7e-c0834bfb2b2c"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "C-Class",
                            ModelYear = new DateOnly(1993, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("46262201-7c4f-4cc8-b0c0-b70ff84071b6"),
                            BrandId = new Guid("f7f6b4fc-0e88-4cb6-af7e-c0834bfb2b2c"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "GLE",
                            ModelYear = new DateOnly(2015, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("32d4f172-fa59-4a15-be8b-f2f9c539814d"),
                            BrandId = new Guid("4d8aaaa6-448a-431c-a50f-a313dba5b3e5"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "A4",
                            ModelYear = new DateOnly(1994, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("dd601366-9262-4058-a0cb-efe4706b7886"),
                            BrandId = new Guid("4d8aaaa6-448a-431c-a50f-a313dba5b3e5"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Q7",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("304937c8-e8b5-4322-9707-81ee54917f09"),
                            BrandId = new Guid("1f13210f-6d0b-4cb9-86b9-fc0fa5898afd"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Elantra",
                            ModelYear = new DateOnly(1990, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("35b311c9-0315-47c2-8615-6497c6161797"),
                            BrandId = new Guid("1f13210f-6d0b-4cb9-86b9-fc0fa5898afd"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Santa Fe",
                            ModelYear = new DateOnly(2000, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ef19e53a-86e5-4794-a160-a2b1009fed10"),
                            BrandId = new Guid("0131e761-bdeb-4fd0-8aba-b3cc0769d0c4"),
                            CarCategoryId = new Guid("89bd23de-98f2-4de2-a753-403789911119"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Soul",
                            ModelYear = new DateOnly(2009, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d40079b8-bad2-4892-96cf-e33f8f64c3ba"),
                            BrandId = new Guid("0131e761-bdeb-4fd0-8aba-b3cc0769d0c4"),
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Optima",
                            ModelYear = new DateOnly(2000, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0c027854-f172-4c85-b345-5a2a50a2540e"),
                            BrandId = new Guid("84062c49-1fe2-4b97-86c4-49e4d0f5449b"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Impreza",
                            ModelYear = new DateOnly(1992, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("44556cfd-a389-4b43-b7f4-b13d8374e4f8"),
                            BrandId = new Guid("84062c49-1fe2-4b97-86c4-49e4d0f5449b"),
                            CarCategoryId = new Guid("13f81bcb-5943-4cfe-9a1f-c38c9dac0969"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Outback",
                            ModelYear = new DateOnly(1994, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("fc90a161-8393-4cf9-a41b-ceb04ab4d65b"),
                            BrandId = new Guid("2c74b21a-5ec4-4dce-b376-b6b0601d7a84"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "RX",
                            ModelYear = new DateOnly(1998, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("58ad4554-54e2-4374-b20b-80eb92a5ce32"),
                            BrandId = new Guid("2c74b21a-5ec4-4dce-b376-b6b0601d7a84"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "ES",
                            ModelYear = new DateOnly(1989, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d9de80a0-0669-48dc-b4fa-6c2da348ae21"),
                            BrandId = new Guid("350b60f4-40fb-499b-9358-3a06ee2ff5f7"),
                            CarCategoryId = new Guid("48b990a0-cce6-4d09-9a7e-e6d1a76bdb46"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Charger",
                            ModelYear = new DateOnly(1966, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("90398dd5-a925-4a42-9da0-1fb4ca4db86f"),
                            BrandId = new Guid("350b60f4-40fb-499b-9358-3a06ee2ff5f7"),
                            CarCategoryId = new Guid("48b990a0-cce6-4d09-9a7e-e6d1a76bdb46"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Challenger",
                            ModelYear = new DateOnly(1970, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e0da9f81-d53d-43df-a09b-54dc4d1c7056"),
                            BrandId = new Guid("855f8a55-c9d0-4532-81ee-6da2bd0db1f6"),
                            CarCategoryId = new Guid("5aa5a48b-686e-426e-a54e-c5e59bbc7373"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Wrangler",
                            ModelYear = new DateOnly(1986, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("70117f5d-6ff1-4858-8d5a-61023d7bfe97"),
                            BrandId = new Guid("855f8a55-c9d0-4532-81ee-6da2bd0db1f6"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Grand Cherokee",
                            ModelYear = new DateOnly(1992, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("382a5533-5b8c-49ca-bb3e-242e8aa4675d"),
                            BrandId = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Escalade",
                            ModelYear = new DateOnly(1999, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f5ca917c-681f-4b4b-97e0-250e6c14fe66"),
                            BrandId = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "CTS",
                            ModelYear = new DateOnly(2003, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7182e277-e952-4879-b2f7-ab5dc04584e1"),
                            BrandId = new Guid("4b3039f3-b460-46be-aa39-e43d4c29af19"),
                            CarCategoryId = new Guid("d904d7f0-674a-48dd-ae45-794d8e257583"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Sierra",
                            ModelYear = new DateOnly(1998, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("117cdc46-af9f-4574-a012-b083c2412d50"),
                            BrandId = new Guid("4b3039f3-b460-46be-aa39-e43d4c29af19"),
                            CarCategoryId = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Yukon",
                            ModelYear = new DateOnly(1992, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("42845e68-16d7-4dca-8ecf-4d6a9424da6a"),
                            BrandId = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Lancer",
                            ModelYear = new DateOnly(1973, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cb7fef13-3f55-4121-a274-0937d1d0c810"),
                            BrandId = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Outlander",
                            ModelYear = new DateOnly(2001, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cd831f07-859d-44b9-981a-91472c7428a9"),
                            BrandId = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "911",
                            ModelYear = new DateOnly(1964, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("8599ac63-b85c-41d5-b789-46b062d05e5d"),
                            BrandId = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Cayenne",
                            ModelYear = new DateOnly(2002, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("71f51929-7b86-4f0f-b576-d7ff85e90747"),
                            BrandId = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "S60",
                            ModelYear = new DateOnly(2000, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6efa7da6-8d4a-403b-afd3-738eb0e9bd98"),
                            BrandId = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "XC90",
                            ModelYear = new DateOnly(2002, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0af1bd43-7aca-47f2-a682-5085fdcd9254"),
                            BrandId = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Range Rover",
                            ModelYear = new DateOnly(1970, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a153be07-ddda-4b52-b540-b37fe38e6263"),
                            BrandId = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Discovery",
                            ModelYear = new DateOnly(1989, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("237a7434-e92a-44a7-abdf-88bc1e5722f1"),
                            BrandId = new Guid("e99dfd5c-ffe7-454d-9ae2-c4622eaa8200"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Mazda3",
                            ModelYear = new DateOnly(2003, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2772a079-889e-491e-8f0a-1f5c674c32d4"),
                            BrandId = new Guid("e99dfd5c-ffe7-454d-9ae2-c4622eaa8200"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "CX-5",
                            ModelYear = new DateOnly(2012, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1e04fadf-3f54-4856-9952-f5141ad5d346"),
                            BrandId = new Guid("71bd8b35-0d22-4783-8638-78eb48bd5629"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Q50",
                            ModelYear = new DateOnly(2013, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ef025de9-516e-4a89-9a5e-381efbbf363b"),
                            BrandId = new Guid("71bd8b35-0d22-4783-8638-78eb48bd5629"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "QX60",
                            ModelYear = new DateOnly(2004, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e41ed308-cfbf-4597-8c74-d2bff7956e22"),
                            BrandId = new Guid("91f09ff2-24ed-4d60-b3c5-5e76204a90ff"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Regal",
                            ModelYear = new DateOnly(1973, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c2706a10-3499-45de-a011-cc8d332c7230"),
                            BrandId = new Guid("91f09ff2-24ed-4d60-b3c5-5e76204a90ff"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Enclave",
                            ModelYear = new DateOnly(2008, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6b4b10f7-50aa-41e1-99b5-0cea46b4417c"),
                            BrandId = new Guid("867a1f57-a7dc-4d8a-95f0-9b1e1b086809"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "TLX",
                            ModelYear = new DateOnly(2014, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1ef45e5a-6014-46ba-8edd-2ebc5bd4ec51"),
                            BrandId = new Guid("867a1f57-a7dc-4d8a-95f0-9b1e1b086809"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "RDX",
                            ModelYear = new DateOnly(2006, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f4784e36-400b-4a68-ae3c-28c0d24e0154"),
                            BrandId = new Guid("b3126c73-0e1e-40fd-8dec-f7c4d2789dd9"),
                            CarCategoryId = new Guid("fc000760-6615-4f3b-96cc-7607ba6609a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "500",
                            ModelYear = new DateOnly(1957, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6dc0c636-498f-4391-8569-d9321efc1939"),
                            BrandId = new Guid("b3126c73-0e1e-40fd-8dec-f7c4d2789dd9"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Panda",
                            ModelYear = new DateOnly(1980, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("789a06d0-ff12-4251-b03f-3709cb545736"),
                            BrandId = new Guid("306fd99b-7914-4c4d-a92b-f3d998f3b772"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Cooper",
                            ModelYear = new DateOnly(1959, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("69f92b34-0a15-4497-b843-6addc4e56e34"),
                            BrandId = new Guid("306fd99b-7914-4c4d-a92b-f3d998f3b772"),
                            CarCategoryId = new Guid("983fba7a-11b2-4cdc-8ef0-64ddf6dfbfc4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Clubman",
                            ModelYear = new DateOnly(2007, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("8046ad13-b68e-4c1a-b0c7-f74d15e9837a"),
                            BrandId = new Guid("e9a0d0d3-3a43-406a-b465-b630c5d93f6f"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "300",
                            ModelYear = new DateOnly(2004, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ad6c4793-befb-49d9-ba29-f179174916db"),
                            BrandId = new Guid("e9a0d0d3-3a43-406a-b465-b630c5d93f6f"),
                            CarCategoryId = new Guid("1d25e83b-925e-472a-89d9-38c499dbfdea"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Pacifica",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1ab3d403-fdd9-4443-87be-5bc3987c7350"),
                            BrandId = new Guid("22d61e55-50e5-4dcd-bf40-209fc2fcae12"),
                            CarCategoryId = new Guid("b8e9b4d0-8b60-451a-9810-1132482a0d92"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Model S",
                            ModelYear = new DateOnly(2012, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("69e9f0e8-9823-42ce-8deb-01d0a69c607c"),
                            BrandId = new Guid("22d61e55-50e5-4dcd-bf40-209fc2fcae12"),
                            CarCategoryId = new Guid("b8e9b4d0-8b60-451a-9810-1132482a0d92"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Model 3",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5fee507a-e299-4dea-b9b3-c2621a5d12cd"),
                            BrandId = new Guid("72d247fb-5249-4ce1-a400-fce2559e7db0"),
                            CarCategoryId = new Guid("983fba7a-11b2-4cdc-8ef0-64ddf6dfbfc4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Clio",
                            ModelYear = new DateOnly(1990, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("6397f180-d2b0-4244-8ef9-3c30fab15579"),
                            BrandId = new Guid("72d247fb-5249-4ce1-a400-fce2559e7db0"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Megane",
                            ModelYear = new DateOnly(1995, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3e65852a-2f29-4617-b145-650d02b92703"),
                            BrandId = new Guid("e5e319f9-ef2a-4ab7-a847-5f0d3c7a1caf"),
                            CarCategoryId = new Guid("983fba7a-11b2-4cdc-8ef0-64ddf6dfbfc4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "308",
                            ModelYear = new DateOnly(2007, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c6bca118-85de-4d7a-94a5-4609d0738542"),
                            BrandId = new Guid("e5e319f9-ef2a-4ab7-a847-5f0d3c7a1caf"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "508",
                            ModelYear = new DateOnly(2010, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3f0b103c-d953-40d8-bf11-8b74e0f0760c"),
                            BrandId = new Guid("537c1813-334d-41c0-987b-0ed1509475f7"),
                            CarCategoryId = new Guid("fc000760-6615-4f3b-96cc-7607ba6609a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Swift",
                            ModelYear = new DateOnly(1983, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1d5d22e0-80fb-4840-b1de-81587c86b3c1"),
                            BrandId = new Guid("537c1813-334d-41c0-987b-0ed1509475f7"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Vitara",
                            ModelYear = new DateOnly(1988, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b695c394-dc9a-4e8d-88fc-c6b39ec3d244"),
                            BrandId = new Guid("2254581b-c244-4c41-b5e4-c353629c2105"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Octavia",
                            ModelYear = new DateOnly(1996, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e0ca3b3e-b6d8-42b0-8931-86e685804b5c"),
                            BrandId = new Guid("2254581b-c244-4c41-b5e4-c353629c2105"),
                            CarCategoryId = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Superb",
                            ModelYear = new DateOnly(2001, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("38801743-71f9-4265-a680-f77c0a601876"),
                            BrandId = new Guid("97b8ca2f-9784-4262-a57e-5695f3f0f642"),
                            CarCategoryId = new Guid("d4018b86-eb87-4114-9b9e-5fae1034cbd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Astra",
                            ModelYear = new DateOnly(1991, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b78f0ea5-2866-4ec2-bb8b-ac9824babb5e"),
                            BrandId = new Guid("97b8ca2f-9784-4262-a57e-5695f3f0f642"),
                            CarCategoryId = new Guid("fc000760-6615-4f3b-96cc-7607ba6609a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Corsa",
                            ModelYear = new DateOnly(1982, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7c471545-35a0-484c-bf97-f62b6a362e32"),
                            BrandId = new Guid("7d0e4fb5-6e8e-48fc-ba2b-daa570f5f96f"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Giulia",
                            ModelYear = new DateOnly(2016, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cf57a9f5-459e-48ed-8886-f073da7db496"),
                            BrandId = new Guid("7d0e4fb5-6e8e-48fc-ba2b-daa570f5f96f"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Stelvio",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("75a19a55-2eea-4d73-abe8-a0edbb76aecb"),
                            BrandId = new Guid("fa7fab24-c298-43cf-b990-341b29a02996"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "9-3",
                            ModelYear = new DateOnly(1998, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1e8e784c-b9d2-427d-b4ad-c16f4a088ad7"),
                            BrandId = new Guid("fa7fab24-c298-43cf-b990-341b29a02996"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "9-5",
                            ModelYear = new DateOnly(2001, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("bf758d69-4028-4560-a5de-758fae3dad94"),
                            BrandId = new Guid("6a927f4f-cc77-4d6d-963f-96a14a6a4fa9"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "G70",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cd733067-7346-4a1e-abcc-09621c28c99d"),
                            BrandId = new Guid("6a927f4f-cc77-4d6d-963f-96a14a6a4fa9"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "GV80",
                            ModelYear = new DateOnly(2020, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c490a1a7-fc47-44b9-8839-e2cd0f854dae"),
                            BrandId = new Guid("6ebc86c7-82e2-4ce4-b613-ebaac626bd18"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "MKZ",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("247edaa4-9c42-47bb-9809-5e2e7af462bd"),
                            BrandId = new Guid("6ebc86c7-82e2-4ce4-b613-ebaac626bd18"),
                            CarCategoryId = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Navigator",
                            ModelYear = new DateOnly(1998, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("8e6a6ca8-fbe1-4d15-92f6-70970006fffb"),
                            BrandId = new Guid("0be257e7-856d-48d6-ab5a-f984a75b67d5"),
                            CarCategoryId = new Guid("d904d7f0-674a-48dd-ae45-794d8e257583"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "D-Max",
                            ModelYear = new DateOnly(2002, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("992017e3-0db0-41b4-b07a-ee6f291b3560"),
                            BrandId = new Guid("0be257e7-856d-48d6-ab5a-f984a75b67d5"),
                            CarCategoryId = new Guid("37a876a6-e608-4bff-9d5b-9bef9e671094"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "MU-X",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("9e285f15-c966-4154-ad18-1534ab5030ea"),
                            BrandId = new Guid("ff884ca0-1e63-4bc1-84a1-4048a6eb627e"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Continental GT",
                            ModelYear = new DateOnly(2003, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("30b0d0a8-0d50-4025-8583-6a41747c1138"),
                            BrandId = new Guid("ff884ca0-1e63-4bc1-84a1-4048a6eb627e"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Flying Spur",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("feba8e7f-d732-4eb0-8a12-7831c9b714dd"),
                            BrandId = new Guid("8d86d786-c02d-43a6-9b3f-3ef15761ba71"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "DB11",
                            ModelYear = new DateOnly(2016, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("458f42e3-b7ce-4fb4-b63d-7dac89efe0a8"),
                            BrandId = new Guid("8d86d786-c02d-43a6-9b3f-3ef15761ba71"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Vantage",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3de05ece-3ef8-48a2-b27d-412a9de7b52c"),
                            BrandId = new Guid("3c18fcda-19de-42ee-88fa-7f9a5c60268f"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Ghibli",
                            ModelYear = new DateOnly(2013, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4dce94b1-6053-479f-b4e2-0dbdf578305f"),
                            BrandId = new Guid("3c18fcda-19de-42ee-88fa-7f9a5c60268f"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Quattroporte",
                            ModelYear = new DateOnly(1963, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b6246e92-dad1-40e7-b3b6-7962d7986d77"),
                            BrandId = new Guid("da9ca2f3-3a68-4311-b189-cc99c3fcebaa"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "F-Type",
                            ModelYear = new DateOnly(2013, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1d509463-fa11-4729-b3e8-3b928547784e"),
                            BrandId = new Guid("da9ca2f3-3a68-4311-b189-cc99c3fcebaa"),
                            CarCategoryId = new Guid("3a6129c6-36ce-4e85-b0a0-8ffbee30ddf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "XE",
                            ModelYear = new DateOnly(2004, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("96924990-3a5f-439c-9890-f8c8c0851ec0"),
                            BrandId = new Guid("d263567a-41b2-407d-b40d-6bad18eb32ca"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "488 GTB",
                            ModelYear = new DateOnly(2009, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1f9f9bce-f9f2-4ac6-a614-004ae7fd9d6a"),
                            BrandId = new Guid("d263567a-41b2-407d-b40d-6bad18eb32ca"),
                            CarCategoryId = new Guid("506b4f2f-68f7-4b69-ab81-1242de996a18"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Portofino",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ec4d118f-a22a-49da-bf50-93b504b2e623"),
                            BrandId = new Guid("61c63482-0890-497e-9013-6c1509e819eb"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Aventador",
                            ModelYear = new DateOnly(2011, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a5f3f9f6-8d0a-4cb9-81cd-006b8d0ff567"),
                            BrandId = new Guid("61c63482-0890-497e-9013-6c1509e819eb"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Huracan",
                            ModelYear = new DateOnly(2014, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3b22fb62-233c-481d-a6db-3ccc71e92414"),
                            BrandId = new Guid("04d6430b-5665-4a0b-b33f-f782d5da2a58"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Veyron",
                            ModelYear = new DateOnly(2005, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("04d301dc-d20d-4985-b124-0edfe96aeede"),
                            BrandId = new Guid("04d6430b-5665-4a0b-b33f-f782d5da2a58"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Chiron",
                            ModelYear = new DateOnly(2016, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2f0d3e9a-4e57-4146-a25a-b8e1ac1f109d"),
                            BrandId = new Guid("b9333f92-0e83-4343-973a-760182aea47e"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "720S",
                            ModelYear = new DateOnly(2017, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3977dc0e-af17-454c-a798-60c4a1e44893"),
                            BrandId = new Guid("b9333f92-0e83-4343-973a-760182aea47e"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "570S",
                            ModelYear = new DateOnly(2015, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("8095ada4-712b-4805-b806-7d00d95d6858"),
                            BrandId = new Guid("adae589c-555f-48ac-9925-71fa96fa3d88"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Phantom",
                            ModelYear = new DateOnly(1925, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("56ee2663-5e97-48a6-934d-618ac3ff1cea"),
                            BrandId = new Guid("adae589c-555f-48ac-9925-71fa96fa3d88"),
                            CarCategoryId = new Guid("7ebb6c15-8e16-439c-bd07-b998c4b26ab3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Ghost",
                            ModelYear = new DateOnly(2003, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("9869d0b2-8f87-44b6-9f48-02fe4db7d229"),
                            BrandId = new Guid("7a021389-57ea-453d-b194-3c692735671d"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Huayra",
                            ModelYear = new DateOnly(2011, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("9f56523e-903c-4dc4-a1a8-df7730bc1cce"),
                            BrandId = new Guid("7a021389-57ea-453d-b194-3c692735671d"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Zonda",
                            ModelYear = new DateOnly(1999, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("328e80cf-251d-460d-928b-345e08cf642b"),
                            BrandId = new Guid("51ae4906-854f-4a0a-8629-a0ba2656b9b9"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Agera",
                            ModelYear = new DateOnly(1999, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3977dc0e-af17-454c-a798-60c4a1c44893"),
                            BrandId = new Guid("51ae4906-854f-4a0a-8629-a0ba2656b9b9"),
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModelName = "Regera",
                            ModelYear = new DateOnly(2016, 1, 1),
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CarPartCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carpart_id_primary");

                    b.HasIndex(new[] { "CarPartCategoryId" }, "carpart_carpartcategoryid_index");

                    b.HasIndex(new[] { "PartName" }, "carpart_partname_unique")
                        .IsUnique();

                    b.ToTable("CarPart", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            CarPartCategoryId = new Guid("47cc8b19-70ce-46f3-aef9-eb933eea2182"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Engine Oil",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4b3039f3-b460-46be-aa39-e43d4c29af19"),
                            CarPartCategoryId = new Guid("30e45fc3-a2d1-4006-be2b-9de2b1c5130c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Air Filter",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            CarPartCategoryId = new Guid("23e128b8-73fe-4e74-bfdf-97d82911af47"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Brake Pad",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("855f8a55-c9d0-4532-81ee-6da2bd0db1f6"),
                            CarPartCategoryId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Brake Disc",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("350b60f4-40fb-499b-9358-3a06ee2ff5f7"),
                            CarPartCategoryId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Shock Absorber",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2c74b21a-5ec4-4dce-b376-b6b0601d7a84"),
                            CarPartCategoryId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Clutch Plate",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("84062c49-1fe2-4b97-86c4-49e4d0f5449b"),
                            CarPartCategoryId = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Battery",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0131e761-bdeb-4fd0-8aba-b3cc0769d0c4"),
                            CarPartCategoryId = new Guid("f7f6b4fc-0e88-4cb6-af7e-c0834bfb2b2c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartName = "Exhaust Pipe",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPartCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("carpartcategory_id_primary");

                    b.HasIndex(new[] { "PartCategory" }, "carpartcategory_partcategory_unique")
                        .IsUnique();

                    b.ToTable("CarPartCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47cc8b19-70ce-46f3-aef9-eb933eea2182"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Engine Part",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("30e45fc3-a2d1-4006-be2b-9de2b1c5130c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Brake System",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("23e128b8-73fe-4e74-bfdf-97d82911af47"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Suspension",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("793ed2e4-eba2-407e-a814-ab8d5ddcdfc7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Electrical System",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4224e14b-fce0-47cb-904f-0c7c286d45f8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Exhaust System",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5b4d0698-cf56-41ff-927f-3226f1146f0f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Cooling System",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f7f6b4fc-0e88-4cb6-af7e-c0834bfb2b2c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Fuel System",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4d8aaaa6-448a-431c-a50f-a313dba5b3e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Steering System",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("1f13210f-6d0b-4cb9-86b9-fc0fa5898afd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartCategory = "Interior Parts",
                            Status = "Inactive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CustomerCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VehicleIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("customercar_id_primary");

                    b.HasIndex("CarModelId");

                    b.HasIndex(new[] { "CreatedByEmployeeId" }, "customercar_createdbyemployeeid_index");

                    b.HasIndex(new[] { "CustomerId" }, "customercar_customerid_index");

                    b.HasIndex(new[] { "LicensePlateNumber" }, "customercar_licenseplatenumber_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "VehicleIdentificationNumber" }, "customercar_vehicleidentificationnumber_unique")
                        .IsUnique();

                    b.ToTable("CustomerCar", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CitizenIdentification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WorkplaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("employeeinfo_userid_primary");

                    b.HasIndex(new[] { "CitizenIdentification" }, "employeeinfo_citizenidentification_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "WorkplaceId" }, "employeeinfo_workplaceid_index");

                    b.ToTable("EmployeeInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1230a288-3e5e-4ee1-a75c-3fd7af6480a0"),
                            CitizenIdentification = "1234",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("e3dbf2c8-899d-4b2a-91f7-d2315d3f3bcb")
                        },
                        new
                        {
                            Id = new Guid("b78245a2-a2bf-45b4-8572-b2c3f1948629"),
                            CitizenIdentification = "5124",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("e3dbf2c8-899d-4b2a-91f7-d2315d3f3bcb")
                        },
                        new
                        {
                            Id = new Guid("f8a4e60d-3113-4f25-8477-be205b0860c9"),
                            CitizenIdentification = "66316",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("e3dbf2c8-899d-4b2a-91f7-d2315d3f3bcb")
                        },
                        new
                        {
                            Id = new Guid("e2060ff5-5fb9-4b20-a11a-bf6ae4716ad5"),
                            CitizenIdentification = "616747",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = false,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("de0d20e6-17e6-40e8-8274-c89a66e64fa5"),
                            CitizenIdentification = "782135",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("0a1b2c3d-4e5f-6789-abcd-ef0123456789"),
                            CitizenIdentification = "78213515",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("1b2c3d4e-5f67-89ab-cdef-0123456789ab"),
                            CitizenIdentification = "78213514",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("2c3d4e5f-6789-abcd-ef01-23456789abcd"),
                            CitizenIdentification = "78213513",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("3d4e5f67-89ab-cdef-0123-456789abcdef"),
                            CitizenIdentification = "78213512",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("4e5f6789-abcd-ef01-2345-6789abcdef01"),
                            CitizenIdentification = "78213511",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("5f6789ab-cdef-0123-4567-89abcdef0123"),
                            CitizenIdentification = "51249",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("6789abcd-ef01-2345-6789-abcdef012345"),
                            CitizenIdentification = "51248",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("789abcde-f012-3456-789a-bcdef0123456"),
                            CitizenIdentification = "51247",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("89abcdef-0123-4567-89ab-cdef01234567"),
                            CitizenIdentification = "51246",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("9abcdef0-1234-5678-9abc-def012345678"),
                            CitizenIdentification = "51245",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("abcd1234-ef56-7890-abcd-ef1234567890"),
                            CitizenIdentification = "7821354",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9")
                        },
                        new
                        {
                            Id = new Guid("bcde2345-f678-9012-bcde-f23456789012"),
                            CitizenIdentification = "51243",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861")
                        },
                        new
                        {
                            Id = new Guid("cdef3456-7890-1234-cdef-345678901234"),
                            CitizenIdentification = "7821352",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("4c809c47-7e87-4cec-a883-30e2718fed5e")
                        },
                        new
                        {
                            Id = new Guid("def45678-9012-3456-def0-456789012345"),
                            CitizenIdentification = "51241",
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Gender = true,
                            WorkplaceId = new Guid("e3dbf2c8-899d-4b2a-91f7-d2315d3f3bcb")
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("employeeschedule_id_primary");

                    b.HasIndex(new[] { "AppointmentDetailId", "EmployeeId" }, "employeeschedule_appointmentdetailid_employeeid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "AppointmentDetailId" }, "employeeschedule_appointmentdetailid_index");

                    b.HasIndex(new[] { "EmployeeId" }, "employeeschedule_employeeid_index");

                    b.ToTable("EmployeeSchedule", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssued", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedWareHouseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("goodsissued_id_primary");

                    b.HasIndex("CreatedWareHouseManagerId");

                    b.HasIndex("GarageId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GoodsIssued", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsIssuedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtWareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("goodsissueddetail_id_primary");

                    b.HasIndex(new[] { "GoodsIssuedId" }, "goodsissueddetail_goodsissuedid_index");

                    b.HasIndex(new[] { "ProductAtWareHouseId" }, "goodsissueddetail_productatwarehouseid_index");

                    b.ToTable("GoodsIssuedDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedWarehouseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefereneceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceDistrict")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceProvince")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceWards")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("SupplierContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("goodsreceived_id_primary");

                    b.HasIndex("CreatedWarehouseManagerId");

                    b.HasIndex(new[] { "SupplierContactId" }, "goodsreceived_suppliercontactid_index");

                    b.HasIndex(new[] { "WarehouseId" }, "goodsreceived_warehouseid_index");

                    b.ToTable("GoodsReceived", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("goodsreceiveddetail_id_primary");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "GoodsReceivedId" }, "goodsreceiveddetail_goodsreceivedid_index");

                    b.ToTable("GoodsReceivedDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("invoice_appointmentid_primary");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GarageId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoicePackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("invoicepackagedetail_id_primary");

                    b.HasIndex("PackageHistoryId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoicepackagedetail_invoiceid_index");

                    b.HasIndex(new[] { "InvoiceId", "PackageHistoryId" }, "invoicepackagedetail_invoiceid_packagehistoryid_unique")
                        .IsUnique();

                    b.ToTable("InvoicePackageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceSellProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("invoicesellproduct_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoicesellproduct_invoiceid_index");

                    b.HasIndex(new[] { "ProductHistoryId", "InvoiceId", "ProductAtGarageId" }, "invoicesellproduct_producthistoryid_invoiceid_productatgarageid_unique")
                        .IsUnique();

                    b.ToTable("InvoiceSellProduct", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceServiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("invoiceservicedetail_id_primary");

                    b.HasIndex("ServiceHistoryId");

                    b.HasIndex(new[] { "InvoiceId" }, "invoiceservicedetail_invoiceid_index");

                    b.HasIndex(new[] { "InvoiceId", "ServiceHistoryId" }, "invoiceservicedetail_invoiceid_servicehistoryid_unique")
                        .IsUnique();

                    b.ToTable("InvoiceServiceDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("package_id_primary");

                    b.HasIndex(new[] { "CarCategoryId" }, "package_carcategoryid_index");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("int");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("packagecondition_id_primary");

                    b.HasIndex(new[] { "ConditionType", "ConditionValue" }, "packagecondition_conditiontype_conditionvalue_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageId" }, "packagecondition_packageid_index");

                    b.ToTable("PackageCondition", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetail", b =>
                {
                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PackageHistoryId", "ServiceId")
                        .HasName("packagedetail_packagehistoryid_serviceid_primary");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageFeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packagefeedback_id_primary");

                    b.HasIndex(new[] { "CustomerId" }, "packagefeedback_customerid_index");

                    b.HasIndex(new[] { "PackageId" }, "packagefeedback_packageid_index");

                    b.ToTable("PackageFeedBack", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TimeUnit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("ValidityPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("packagehistory_id_primary");

                    b.HasIndex(new[] { "PackageId" }, "packagehistory_packageid_index");

                    b.HasIndex(new[] { "PackageId", "PackagePrice", "ValidityPeriod", "TimeUnit", "UsageLimit" }, "packagehistory_packageid_packageprice_validityperiod_timeunit_usagelimit_unique")
                        .IsUnique();

                    b.ToTable("PackageHistory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packageimage_id_primary");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceAppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsagedCount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("packageusage_id_primary");

                    b.HasIndex("PackageHistoryId");

                    b.HasIndex(new[] { "CustomerCarId" }, "packageusage_customercarid_index");

                    b.HasIndex(new[] { "InvoiceAppointmentId" }, "packageusage_invoiceappointmentid_unique")
                        .IsUnique();

                    b.ToTable("PackageUsage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageUsageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("packageusagedetail_id_primary");

                    b.HasIndex(new[] { "AppointmentId" }, "packageusagedetail_appointmentid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageUsageId", "AppointmentId" }, "packageusagedetail_packageusageid_appointmentid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PackageUsageId" }, "packageusagedetail_packageusageid_index");

                    b.ToTable("PackageUsageDetail", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProductBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("product_id_primary");

                    b.HasIndex(new[] { "BrandId" }, "product_brandid_index");

                    b.HasIndex(new[] { "ProductBarcode" }, "product_productbarcode_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductCategoryId" }, "product_productcategoryid_index");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            BrandId = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ProductBarcode = "6291041500213",
                            ProductCategoryId = new Guid("c29a6297-20cd-449d-8ca8-6353e7cd4505"),
                            ProductDescription = "The Smartphone XYZ Pro is a premium device featuring a 6.7-inch AMOLED display with 4K resolution and HDR10+ technology. Powered by the Snapdragon 888 chipset, 12GB of RAM, and 256GB of internal storage, this phone delivers smooth performance for all tasks. The 108MP main camera supports 8K video recording, and the 5000mAh battery supports 65W fast charging.",
                            ProductName = "Toyota Camry",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            BrandId = new Guid("855f8a55-c9d0-4532-81ee-6da2bd0db1f6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ProductBarcode = "5901234123457",
                            ProductCategoryId = new Guid("40c29595-cbfe-4226-bbd4-61ac6874ffbc"),
                            ProductDescription = "The UltraBook 2023 is an ultra-thin and lightweight laptop, weighing just 1.2kg, with a 14-inch 2.5K resolution display. It is equipped with a 12th Gen Intel Core i7 processor, 16GB of RAM, and a 512GB SSD. With up to 12 hours of battery life and Thunderbolt 4 connectivity, it is perfect for mobile work and entertainment.",
                            ProductName = "Ford Mustang",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            BrandId = new Guid("350b60f4-40fb-499b-9358-3a06ee2ff5f7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ProductBarcode = "4006381333931",
                            ProductCategoryId = new Guid("6e8f9461-9115-4847-83b9-60067db961ab"),
                            ProductDescription = "The Mirrorless Alpha Z9 is the perfect choice for professional photographers. With a 45MP full-frame sensor, 6K video recording, and 5-axis image stabilization, this camera delivers sharp and true-to-life image quality. It also offers a continuous shooting speed of up to 20 frames per second.",
                            ProductName = "Volkswagen Golf",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            BrandId = new Guid("abadc9e1-c8e6-4f40-b078-47f609d1cf79"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ProductBarcode = "9780201379624",
                            ProductCategoryId = new Guid("4584997b-918a-4422-90d9-434bf2315458"),
                            ProductDescription = "The SoundWave 360 Smart Speaker features an integrated AI virtual assistant and supports voice control. With 360-degree surround sound and 50W of power, it delivers an immersive audio experience. It connects wirelessly via Bluetooth 5.0 and Wi-Fi, and is compatible with smart home devices.",
                            ProductName = "Honda Civic",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtGarage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProductBarcodeAtGarage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productatgarage_goodsissueddetailid_primary");

                    b.ToTable("ProductAtGarage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productatwarehouse_goodsreceiveddetailid_primary");

                    b.ToTable("ProductAtWarehouse", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productcategory_id_primary");

                    b.HasIndex(new[] { "Category" }, "productcategory_category_unique")
                        .IsUnique();

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            Category = "Electronics",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            Category = "Clothing",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            Category = "Home & Kitchen",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("producthistory_id_primary");

                    b.HasIndex(new[] { "ProductId" }, "producthistory_productid_index");

                    b.ToTable("ProductHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9a0d0d3-3a43-406a-b465-b630c5d93f6f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            ProductPrice = 500m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("22d61e55-50e5-4dcd-bf40-209fc2fcae12"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            ProductPrice = 520m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("72d247fb-5249-4ce1-a400-fce2559e7db0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("ac103ccc-bd82-44ca-adb7-5b478b95965a"),
                            ProductPrice = 1200m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("e5e319f9-ef2a-4ab7-a847-5f0d3c7a1caf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            ProductPrice = 150m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("537c1813-334d-41c0-987b-0ed1509475f7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            ProductPrice = 200m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2254581b-c244-4c41-b5e4-c353629c2105"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            ProductPrice = 300m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("97b8ca2f-9784-4262-a57e-5695f3f0f642"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("ac103ccc-bd82-44ca-adb7-5b478b95965a"),
                            ProductPrice = 450m,
                            Status = "None",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("productimage_id_primary");

                    b.HasIndex(new[] { "ProductId" }, "productimage_productid_index");

                    b.ToTable("ProductImage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("71bd8b35-0d22-4783-8638-78eb48bd5629"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageId = "N/A",
                            ImageLink = "https://example.com/images/1.jpg",
                            ProductId = new Guid("f5fd6ee3-a8b6-452c-9042-146e8afc875f"),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("91f09ff2-24ed-4d60-b3c5-5e76204a90ff"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageId = "N/A",
                            ImageLink = "https://example.com/images/2.jpg",
                            ProductId = new Guid("cee5a4d8-de84-4482-9da9-302e2290cb0f"),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("867a1f57-a7dc-4d8a-95f0-9b1e1b086809"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageId = "N/A",
                            ImageLink = "https://example.com/images/3.jpg",
                            ProductId = new Guid("ac103ccc-bd82-44ca-adb7-5b478b95965a"),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b3126c73-0e1e-40fd-8dec-f7c4d2789dd9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageId = "N/A",
                            ImageLink = "https://example.com/images/4.jpg",
                            ProductId = new Guid("1c1ffd05-3b06-48bf-b78c-86b6ef2d3cef"),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("306fd99b-7914-4c4d-a92b-f3d998f3b772"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageId = "N/A",
                            ImageLink = "https://example.com/images/5.jpg",
                            ProductId = new Guid("e9a7beda-ff63-4ac5-92cb-b7fa152c41c2"),
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 0, 36, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ReplacementPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtGarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("replacementpart_id_primary");

                    b.HasIndex("ProductAtGarageId");

                    b.HasIndex("ProductHistoryId");

                    b.HasIndex(new[] { "InvoiceDetailId" }, "replacementpart_invoiceappointmentdetailid_index");

                    b.HasIndex(new[] { "InvoiceDetailId", "ProductHistoryId", "ProductAtGarageId" }, "replacementpart_invoiceappointmentdetailid_producthistoryid_productatgarageid_unique")
                        .IsUnique();

                    b.ToTable("ReplacementPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb739"),
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a"),
                            Name = "Mechanic",
                            NormalizedName = "MECHANIC"
                        },
                        new
                        {
                            Id = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("b10aa072-2522-41d9-8e12-c20f28082a0e"),
                            Name = "WarehouseManager",
                            NormalizedName = "WAREHOUSEMANAGER"
                        },
                        new
                        {
                            Id = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkNature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("service_id_primary");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex(new[] { "CarPartId" }, "service_carpartid_index");

                    b.HasIndex(new[] { "ServiceCategory", "WorkNature", "Action", "CarCategoryId" }, "service_servicecategory_worknature_action_carcategoryid_unique")
                        .IsUnique();

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d0e4fb5-6e8e-48fc-ba2b-daa570f5f96f"),
                            Action = "Replace",
                            CarCategoryId = new Guid("89bd23de-98f2-4de2-a753-403789911119"),
                            CarPartId = new Guid("82b56cc1-7122-46ec-817e-b06cd0747f55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6446), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace engine oil and oil filter",
                            EstimatedHours = 1,
                            ServiceCategory = "Maintenance",
                            ServiceName = "Oil Change",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6604), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Routine"
                        },
                        new
                        {
                            Id = new Guid("fa7fab24-c298-43cf-b990-341b29a02996"),
                            Action = "Replace",
                            CarCategoryId = new Guid("1d25e83b-925e-472a-89d9-38c499dbfdea"),
                            CarPartId = new Guid("45cdfef2-2b7d-48aa-b8fa-f95c0aa194ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6756), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace worn-out brake pads",
                            EstimatedHours = 2,
                            ServiceCategory = "Repair",
                            ServiceName = "Brake Pad Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6756), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Safety"
                        },
                        new
                        {
                            Id = new Guid("6a927f4f-cc77-4d6d-963f-96a14a6a4fa9"),
                            Action = "Replace",
                            CarCategoryId = new Guid("f5bf5757-92b6-4cc2-b86b-1995f28d3fb6"),
                            CarPartId = new Guid("82b56cc1-7122-46ec-817e-b06cd0747f55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6765), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace faulty shock absorbers",
                            EstimatedHours = 3,
                            ServiceCategory = "Repair",
                            ServiceName = "Shock Absorber Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6765), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Performance"
                        },
                        new
                        {
                            Id = new Guid("6ebc86c7-82e2-4ce4-b613-ebaac626bd18"),
                            Action = "Replace",
                            CarCategoryId = new Guid("506b4f2f-68f7-4b69-ab81-1242de996a18"),
                            CarPartId = new Guid("82b56cc1-7122-46ec-817e-b06cd0747f55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6770), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace worn-out clutch kit",
                            EstimatedHours = 4,
                            ServiceCategory = "Repair",
                            ServiceName = "Clutch Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6771), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Performance"
                        },
                        new
                        {
                            Id = new Guid("0be257e7-856d-48d6-ab5a-f984a75b67d5"),
                            Action = "Replace",
                            CarCategoryId = new Guid("b8e9b4d0-8b60-451a-9810-1132482a0d92"),
                            CarPartId = new Guid("45cdfef2-2b7d-48aa-b8fa-f95c0aa194ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6776), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace old battery with a new one",
                            EstimatedHours = 1,
                            ServiceCategory = "Maintenance",
                            ServiceName = "Battery Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6777), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Safety"
                        },
                        new
                        {
                            Id = new Guid("ff884ca0-1e63-4bc1-84a1-4048a6eb627e"),
                            Action = "Replace",
                            CarCategoryId = new Guid("61a22ffb-c41d-4365-b067-11213e5579f9"),
                            CarPartId = new Guid("45cdfef2-2b7d-48aa-b8fa-f95c0aa194ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6782), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace damaged muffler",
                            EstimatedHours = 2,
                            ServiceCategory = "Repair",
                            ServiceName = "Muffler Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6782), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Performance"
                        },
                        new
                        {
                            Id = new Guid("8d86d786-c02d-43a6-9b3f-3ef15761ba71"),
                            Action = "Replace",
                            CarCategoryId = new Guid("6f9e4206-d0a0-4366-a997-094827005006"),
                            CarPartId = new Guid("82b56cc1-7122-46ec-817e-b06cd0747f55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6788), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Replace leaking radiator",
                            EstimatedHours = 3,
                            ServiceCategory = "Repair",
                            ServiceName = "Radiator Replacement",
                            Status = "0",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 25, 19, 52, 13, 892, DateTimeKind.Unspecified).AddTicks(6788), new TimeSpan(0, 0, 0, 0, 0)),
                            WorkNature = "Performance"
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceFeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("servicefeedback_id_primary");

                    b.HasIndex(new[] { "CustomerId" }, "servicefeedback_customerid_index");

                    b.HasIndex(new[] { "ServiceId" }, "servicefeedback_serviceid_index");

                    b.ToTable("ServiceFeedBack", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("servicehistory_id_primary");

                    b.HasIndex(new[] { "ServiceId" }, "servicehistory_serviceid_index");

                    b.ToTable("ServiceHistory", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("serviceimage_id_primary");

                    b.HasIndex(new[] { "ServiceId" }, "serviceimage_serviceid_index");

                    b.ToTable("ServiceImage", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupplierCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("supplier_id_primary");

                    b.HasIndex(new[] { "Address", "Province", "District", "Wards" }, "supplier_address_province_district_wards_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "supplier_name_unique")
                        .IsUnique();

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.SupplierContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("suppliercontact_id_primary");

                    b.HasIndex(new[] { "SupplierId" }, "suppliercontact_supplierid_index");

                    b.ToTable("SupplierContact", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id")
                        .HasName("users_id_primary");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "users_phonenumber_unique")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1230a288-3e5e-4ee1-a75c-3fd7af6480a0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6daf287a-eba6-437d-b358-018a073059c9",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "hanhthse171828@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Hanh",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Trần",
                            LockoutEnabled = true,
                            NormalizedEmail = "HANHTHSE171828@FPT.EDU.VN",
                            NormalizedUserName = "HANHTHSE171828",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1Ha9Qvsjr4ZYn0G3EVnXw9NCOzJAUH5/8W+aVGNQYFCdX3oOOSMtJTvohWbcohuA==",
                            PhoneNumber = "0902596147",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "P7XZM6YDXPFYIY32RM5TXWUN54ISRUSB",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "hanhthse171828"
                        },
                        new
                        {
                            Id = new Guid("b78245a2-a2bf-45b4-8572-b2c3f1948629"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea354e65-522c-4931-99e2-cff427b74b14",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "tannhnse171836@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Tân",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Nguyễn",
                            LockoutEnabled = true,
                            NormalizedEmail = "TANNHNSE171836@FPT.EDU.VN",
                            NormalizedUserName = "TANNHNSE171836",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAkdif146dK+20v4+41Unot91RU8IPXdeCTz7BFJuTHznQt/EeVm4wX5Uj9l0XYmA==",
                            PhoneNumber = "0902596148",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "KLYQWCV3ZURKCJ7LH2HXECD27E5CC3YZ",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "tannhnse171836"
                        },
                        new
                        {
                            Id = new Guid("f8a4e60d-3113-4f25-8477-be205b0860c9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34ab88bc-a7f7-49b1-bdda-50c2a0850b64",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "tanlhnse171831@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Tân",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Lê",
                            LockoutEnabled = true,
                            NormalizedEmail = "TANLHNSE171831@FPT.EDU.VN",
                            NormalizedUserName = "TANLHNSE171831",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8W3WHfSOaP5A3wiInfQ85VBHjz7kBqx4jZUgJenP7T1ArBJU3JQvHEguudGCBChA==",
                            PhoneNumber = "0902596143",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "R44AGPSXQCFMH6LRBGSWBK3PZKZP6LUT",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "tanlhnse171831"
                        },
                        new
                        {
                            Id = new Guid("e2060ff5-5fb9-4b20-a11a-bf6ae4716ad5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0834ee87-36fb-4002-844d-12adb9910e3c",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "giangnthse183257@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Giang",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Nguyễn",
                            LockoutEnabled = true,
                            NormalizedEmail = "GIANGNTHSE183257@FPT.EDU.VN",
                            NormalizedUserName = "GIANGNTHSE183257",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxI/AyF6NXvHVHrfnu9kLzmRHOHOq8dDZwRUD9GWWkzLee8u4C8TmYw4A6R3bInDg==",
                            PhoneNumber = "0902596142",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "CKQPC56VA55WBN7KB3AXN4PKT4HHRQDA",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "giangnthse183257"
                        },
                        new
                        {
                            Id = new Guid("de0d20e6-17e6-40e8-8274-c89a66e64fa5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db2f38c8-64ae-438f-a28d-34074e1e4a42",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "khanhbdse173224@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Khánh",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Bùi",
                            LockoutEnabled = true,
                            NormalizedEmail = "KHANHBDSE173224@FPT.EDU.VN",
                            NormalizedUserName = "KHANHBDSE173224",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8HN46vRsKmlCeYqZXwtRzylfbdmE/IlaRy8NUGvve7BEWIU2SR93NV4bw/bEe8Iw==",
                            PhoneNumber = "0902596149",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "NNC3W4EI4NHQTPOCMMT6KJZVZUAYSQXT",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "khanhbdse173224"
                        },
                        new
                        {
                            Id = new Guid("773d6761-8990-4408-be8f-321a7659825a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db2f38c8-64ae-438f-a28d-34074e1e4a42",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_1_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_1_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@gmail.com",
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0902596109",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "NNC3W4EI4NHQTPOCMMT6KJZVZUAYSQXT",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = new Guid("67f4a543-7ff4-4db9-bf4a-748d3f9e13b1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8e7d1a4-22ab-48a4-9c57-12e334c5b0a6",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_2_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_2_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@gmail.com",
                            NormalizedUserName = "CUSTOMER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0901234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "A7D5Q2EI4NHYTPOCMMT6KJZVZUAYSQZT",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = new Guid("d4b8cfb8-8b97-4d6d-bf1b-90f17fd853f3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13cf3846-0b7a-46d3-a935-6c72d9bc469a",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_3_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_3_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@gmail.com",
                            NormalizedUserName = "CUSTOMER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0909876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "K5R8X9EI4NHQTPOCMMT6KJZVZUAYSQXB",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer3"
                        },
                        new
                        {
                            Id = new Guid("f1a3d7c8-3d50-42b7-9b92-b53717b8e7a8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24de4957-1c8b-57e4-b046-7d83eaac57ab",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_4_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_4_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@gmail.com",
                            NormalizedUserName = "CUSTOMER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0911122233",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "L9M7N8EI4NHQTPOCMMT6KJZVZUAYSQXC",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer4"
                        },
                        new
                        {
                            Id = new Guid("a2e4f1b2-6f2d-42f7-a2b5-3a9b8c1d2e3f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35ef5a68-2d9c-68f5-c157-8e94fbbd68bc",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_5_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_5_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@gmail.com",
                            NormalizedUserName = "CUSTOMER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0912233445",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "P3Q2R1EI4NHQTPOCMMT6KJZVZUAYSQXD",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer5"
                        },
                        new
                        {
                            Id = new Guid("b3c5d6e7-f8a9-4b0c-8d1e-2f3a4b5c6d7e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ff6b79-3ead-4af6-d268-9fabc0cda79d",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_6_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_6_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@gmail.com",
                            NormalizedUserName = "CUSTOMER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0913344556",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "S4T5U6EI4NHQTPOCMMT6KJZVZUAYSQXE",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer6"
                        },
                        new
                        {
                            Id = new Guid("c4d5e6f7-a8b9-4c0d-9e1f-3a4b5c6d7e8f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57a07c8a-4fbe-4b07-e379-afbcde1eb8ae",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_7_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_7_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@gmail.com",
                            NormalizedUserName = "CUSTOMER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0914455667",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "V7W8X9EI4NHQTPOCMMT6KJZVZUAYSQXF",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer7"
                        },
                        new
                        {
                            Id = new Guid("d5e6f7a8-b9c0-4d1e-8f2a-4b5c6d7e8f90"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68b18d9b-50cf-4c18-f48a-bcdef1234a0b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_8_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_8_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@gmail.com",
                            NormalizedUserName = "CUSTOMER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0915566778",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "Z1A2B3EI4NHQTPOCMMT6KJZVZUAYSQXG",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer8"
                        },
                        new
                        {
                            Id = new Guid("e6f7a8b9-c0d1-4e2f-9a3b-5c6d7e8f9012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79c29eac-61d0-4d29-a59b-cdef2345b1c2",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_9_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_9_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@gmail.com",
                            NormalizedUserName = "CUSTOMER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0916677889",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "C4D5E6EI4NHQTPOCMMT6KJZVZUAYSQXH",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer9"
                        },
                        new
                        {
                            Id = new Guid("f7a8b9c0-d1e2-4f3a-8b4c-6d7e8f901234"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ad3afbd-72e1-4e3a-b6ac-def34567c2d3",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Customer_10_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Customer_10_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@gmail.com",
                            NormalizedUserName = "CUSTOMER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0917788990",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "F7G8H9EI4NHQTPOCMMT6KJZVZUAYSQXI",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "customer10"
                        },
                        new
                        {
                            Id = new Guid("0a1b2c3d-4e5f-6789-abcd-ef0123456789"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2e4f7e1-3c1d-4f09-bcf5-6f23d7d56d9b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_1_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_1_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC1@gmail.com",
                            NormalizedUserName = "MECHANIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0921122334",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "M1N2O3EI4NHQTPOCMMT6KJZVZUAYSQXJ",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic1"
                        },
                        new
                        {
                            Id = new Guid("1b2c3d4e-5f67-89ab-cdef-0123456789ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3f5a8e2-4d2e-4a10-cdf6-7e34f8e67ead",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_2_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_2_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC2@gmail.com",
                            NormalizedUserName = "MECHANIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0922233445",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "K2L3M4EI4NHQTPOCMMT6KJZVZUAYSQXK",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic2"
                        },
                        new
                        {
                            Id = new Guid("2c3d4e5f-6789-abcd-ef01-23456789abcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4a6b9e3-5e3f-4b11-def7-8f45a9e78fbe",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_3_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_3_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC3@gmail.com",
                            NormalizedUserName = "MECHANIC3",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0923344556",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "P5Q6R7EI4NHQTPOCMMT6KJZVZUAYSQXL",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic3"
                        },
                        new
                        {
                            Id = new Guid("3d4e5f67-89ab-cdef-0123-456789abcdef"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5b7c0e4-6f4a-4c12-ef08-9a56bab89fcf",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_4_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_4_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC4@gmail.com",
                            NormalizedUserName = "MECHANIC4",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0924455667",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "S8T9U0EI4NHQTPOCMMT6KJZVZUAYSQXM",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic4"
                        },
                        new
                        {
                            Id = new Guid("4e5f6789-abcd-ef01-2345-6789abcdef01"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6c8d1e5-7a5b-4d13-ef19-ab67cbc9ad0a",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_5_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_5_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC5@gmail.com",
                            NormalizedUserName = "MECHANIC5",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0925566778",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "V1W2X3EI4NHQTPOCMMT6KJZVZUAYSQXN",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic5"
                        },
                        new
                        {
                            Id = new Guid("5f6789ab-cdef-0123-4567-89abcdef0123"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7d9e2f6-8b6c-4e14-ef2a-bc78dcdabd1b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_6_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_6_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC6@gmail.com",
                            NormalizedUserName = "MECHANIC6",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0926677889",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "Y4Z5A6EI4NHQTPOCMMT6KJZVZUAYSQXO",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic6"
                        },
                        new
                        {
                            Id = new Guid("6789abcd-ef01-2345-6789-abcdef012345"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8eaf307-9c7d-4f15-ef3b-cd89edcbce2c",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_7_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_7_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC7@gmail.com",
                            NormalizedUserName = "MECHANIC7",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0927788990",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "B7C8D9EI4NHQTPOCMMT6KJZVZUAYSQXP",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic7"
                        },
                        new
                        {
                            Id = new Guid("789abcde-f012-3456-789a-bcdef0123456"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9f0a418-ad8e-4a16-ef4c-de90feacdf3d",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_8_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_8_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC8@gmail.com",
                            NormalizedUserName = "MECHANIC8",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0928899001",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "E0F1G2EI4NHQTPOCMMT6KJZVZUAYSQXQ",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic8"
                        },
                        new
                        {
                            Id = new Guid("89abcdef-0123-4567-89ab-cdef01234567"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da012529-be9f-4b17-ef5d-ef01afbd0e4e",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_9_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_9_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC9@gmail.com",
                            NormalizedUserName = "MECHANIC9",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0929900112",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "H3I4J5EI4NHQTPOCMMT6KJZVZUAYSQXR",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic9"
                        },
                        new
                        {
                            Id = new Guid("9abcdef0-1234-5678-9abc-def012345678"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb12363a-cf10-4c18-ef6e-f012becd1f5f",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "mechanic10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mechanic_10_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Mechanic_10_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "MECHANIC10@gmail.com",
                            NormalizedUserName = "MECHANIC10",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0930011223",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "K6L7M8EI4NHQTPOCMMT6KJZVZUAYSQXS",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "mechanic10"
                        },
                        new
                        {
                            Id = new Guid("abcd1234-ef56-7890-abcd-ef1234567890"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e89cf584-5b71-4a53-a6c5-4d3fa8db0a67",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "cashier1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cashier_1_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Cashier_1_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CASHIER1@gmail.com",
                            NormalizedUserName = "CASHIER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0931122334",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "U2V3W4EI4NHQTPOCMMT6KJZVZUAYSQXU",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "cashier1"
                        },
                        new
                        {
                            Id = new Guid("bcde2345-f678-9012-bcde-f23456789012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f90df695-6c82-4b64-b7d6-5e4fb9ec1b78",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "cashier2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cashier_2_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Cashier_2_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "CASHIER2@gmail.com",
                            NormalizedUserName = "CASHIER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0932233445",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "X5Y6Z7EI4NHQTPOCMMT6KJZVZUAYSQXV",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "cashier2"
                        },
                        new
                        {
                            Id = new Guid("cdef3456-7890-1234-cdef-345678901234"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-4a7b-8c9d-0a1b2c3d4e5f",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "warehouse1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Warehouse_1_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Warehouse_1_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "WAREHOUSE1@gmail.com",
                            NormalizedUserName = "WAREHOUSE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0933344556",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "A8B9C0EI4NHQTPOCMMT6KJZVZUAYSQXW",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "warehouse1"
                        },
                        new
                        {
                            Id = new Guid("def45678-9012-3456-def0-456789012345"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2c3d4e5-f6a7-4b8c-9d0e-1b2c3d4e5f60",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "warehouse2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Warehouse_2_first_name",
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            LastName = "Warehouse_2_last_name",
                            LockoutEnabled = true,
                            NormalizedEmail = "WAREHOUSE2@gmail.com",
                            NormalizedUserName = "WAREHOUSE2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpLNgb8l5j8hIGIH1In9P+i4xj3mHZJHW2klqMNk9owzOYPBbj6f94LmksGXtHhHA==",
                            PhoneNumber = "0934455667",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "D1E2F3EI4NHQTPOCMMT6KJZVZUAYSQXX",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            UserName = "warehouse2"
                        });
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Workplace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkplaceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("workplace_id_primary");

                    b.HasIndex(new[] { "Address", "Province", "District", "Ward" }, "workplace_address_province_district_wards_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "workplace_name_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "workplace_phonenumber_unique")
                        .IsUnique();

                    b.ToTable("Workplace", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1aeb9e5-8c74-4b09-bc57-d4c3df7857f9"),
                            Address = "123 Static St.",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            District = "Static District",
                            Name = "Garage 1",
                            PhoneNumber = "0983456789",
                            Province = "Static Province",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Ward = "12345",
                            WorkplaceType = "Garage"
                        },
                        new
                        {
                            Id = new Guid("e3dbf2c8-899d-4b2a-91f7-d2315d3f3bcb"),
                            Address = "456 Static Ave.",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            District = "Another District",
                            Name = "Warehouse 1",
                            PhoneNumber = "0987654321",
                            Province = "Another Province",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Ward = "67890",
                            WorkplaceType = "Warehouse"
                        },
                        new
                        {
                            Id = new Guid("6760cbb7-f1fa-445f-a175-97e3f060c861"),
                            Address = "124 Static St.",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            District = "Static District",
                            Name = "Garage 2",
                            PhoneNumber = "0983456139",
                            Province = "Static Province",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Ward = "12345",
                            WorkplaceType = "Garage"
                        },
                        new
                        {
                            Id = new Guid("4c809c47-7e87-4cec-a883-30e2718fed5e"),
                            Address = "432 Static Ave.",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            District = "Another District",
                            Name = "Warehouse 2",
                            PhoneNumber = "0987084321",
                            Province = "Another Province",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Ward = "60890",
                            WorkplaceType = "Warehouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1230a288-3e5e-4ee1-a75c-3fd7af6480a0"),
                            RoleId = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925")
                        },
                        new
                        {
                            UserId = new Guid("b78245a2-a2bf-45b4-8572-b2c3f1948629"),
                            RoleId = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925")
                        },
                        new
                        {
                            UserId = new Guid("f8a4e60d-3113-4f25-8477-be205b0860c9"),
                            RoleId = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925")
                        },
                        new
                        {
                            UserId = new Guid("e2060ff5-5fb9-4b20-a11a-bf6ae4716ad5"),
                            RoleId = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925")
                        },
                        new
                        {
                            UserId = new Guid("de0d20e6-17e6-40e8-8274-c89a66e64fa5"),
                            RoleId = new Guid("ef3629ba-332e-4c46-9fa8-54444803f925")
                        },
                        new
                        {
                            UserId = new Guid("f7a8b9c0-d1e2-4f3a-8b4c-6d7e8f901234"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("e6f7a8b9-c0d1-4e2f-9a3b-5c6d7e8f9012"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("d5e6f7a8-b9c0-4d1e-8f2a-4b5c6d7e8f90"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("c4d5e6f7-a8b9-4c0d-9e1f-3a4b5c6d7e8f"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("b3c5d6e7-f8a9-4b0c-8d1e-2f3a4b5c6d7e"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("a2e4f1b2-6f2d-42f7-a2b5-3a9b8c1d2e3f"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("f1a3d7c8-3d50-42b7-9b92-b53717b8e7a8"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("d4b8cfb8-8b97-4d6d-bf1b-90f17fd853f3"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("67f4a543-7ff4-4db9-bf4a-748d3f9e13b1"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("773d6761-8990-4408-be8f-321a7659825a"),
                            RoleId = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b")
                        },
                        new
                        {
                            UserId = new Guid("0a1b2c3d-4e5f-6789-abcd-ef0123456789"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("1b2c3d4e-5f67-89ab-cdef-0123456789ab"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("2c3d4e5f-6789-abcd-ef01-23456789abcd"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("3d4e5f67-89ab-cdef-0123-456789abcdef"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("4e5f6789-abcd-ef01-2345-6789abcdef01"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("5f6789ab-cdef-0123-4567-89abcdef0123"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("6789abcd-ef01-2345-6789-abcdef012345"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("89abcdef-0123-4567-89ab-cdef01234567"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("9abcdef0-1234-5678-9abc-def012345678"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("789abcde-f012-3456-789a-bcdef0123456"),
                            RoleId = new Guid("3c5c548b-b789-41b5-b216-48ddfb5e732a")
                        },
                        new
                        {
                            UserId = new Guid("abcd1234-ef56-7890-abcd-ef1234567890"),
                            RoleId = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb739")
                        },
                        new
                        {
                            UserId = new Guid("bcde2345-f678-9012-bcde-f23456789012"),
                            RoleId = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb739")
                        },
                        new
                        {
                            UserId = new Guid("cdef3456-7890-1234-cdef-345678901234"),
                            RoleId = new Guid("b10aa072-2522-41d9-8e12-c20f28082a0e")
                        },
                        new
                        {
                            UserId = new Guid("def45678-9012-3456-def0-456789012345"),
                            RoleId = new Guid("b10aa072-2522-41d9-8e12-c20f28082a0e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProductCarModel", b =>
                {
                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarModelId", "ProductId")
                        .HasName("productcarmodel_carmodelid_productid_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarModel", (string)null);
                });

            modelBuilder.Entity("ProductCarPart", b =>
                {
                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarPartId", "ProductId")
                        .HasName("productcarpart_carpartid_productid_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarPart", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "ApproveByEmployee")
                        .WithMany("Appointments")
                        .HasForeignKey("ApproveByEmployeeId")
                        .HasConstraintName("appointment_approvebyemployeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", "CarModel")
                        .WithMany("Appointments")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("appointment_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Garage")
                        .WithMany("Appointments")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("appointment_garageid_foreign");

                    b.Navigation("ApproveByEmployee");

                    b.Navigation("CarModel");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetail_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ServiceHistory", "ServiceHistory")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServiceHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetail_servicehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "UpdateByCustomer")
                        .WithMany("AppointmentDetailUpdateByCustomers")
                        .HasForeignKey("UpdateByCustomerId")
                        .HasConstraintName("appointmentdetail_updatebycustomerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "UpdateByEmployee")
                        .WithMany("AppointmentDetailUpdateByEmployees")
                        .HasForeignKey("UpdateByEmployeeId")
                        .HasConstraintName("appointmentdetail_updatebyemployeeid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("ServiceHistory");

                    b.Navigation("UpdateByCustomer");

                    b.Navigation("UpdateByEmployee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetailPackage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany("AppointmentDetailPackages")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetailpackage_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("AppointmentDetailPackages")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentdetailpackage_packagehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "UpdateByCustomer")
                        .WithMany("AppointmentDetailPackageUpdateByCustomers")
                        .HasForeignKey("UpdateByCustomerId")
                        .HasConstraintName("appointmentdetailpackage_updatebycustomerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "UpdateByEmployee")
                        .WithMany("AppointmentDetailPackageUpdateByEmployees")
                        .HasForeignKey("UpdateByEmployeeId")
                        .HasConstraintName("appointmentdetailpackage_updatebyemployeeid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("PackageHistory");

                    b.Navigation("UpdateByCustomer");

                    b.Navigation("UpdateByEmployee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentReplacementPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_appointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtGarage", "ProductAtGarage")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("appointmentreplacementpart_producthistoryid_foreign");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarConditionImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("CarConditionImages")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("carconditionimage_appointmentdetailid_foreign");

                    b.Navigation("AppointmentDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Brand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("carmodel_brandid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("CarModels")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("carmodel_carcategoryid_foreign");

                    b.Navigation("Brand");

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarPartCategory", "CarPartCategory")
                        .WithMany("CarParts")
                        .HasForeignKey("CarPartCategoryId")
                        .IsRequired()
                        .HasConstraintName("carpart_carpartcategoryid_foreign");

                    b.Navigation("CarPartCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CustomerCar", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", "CarModel")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("customercar_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "CreatedByEmployee")
                        .WithMany("CustomerCarCreatedByEmployees")
                        .HasForeignKey("CreatedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("customercar_createdbyemployeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("CustomerCarCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("customercar_customerid_foreign");

                    b.Navigation("CarModel");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeInfo", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "User")
                        .WithOne("EmployeeInfo")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.EmployeeInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employeeinfo_userid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Workplace")
                        .WithMany("EmployeeInfos")
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("employeeinfo_workplaceid_foreign");

                    b.Navigation("User");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeSchedule", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("employeeschedule_appointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("employeeschedule_employeeid_foreign");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssued", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "CreatedWareHouseManager")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("CreatedWareHouseManagerId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_createdwarehousemanagerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Garage")
                        .WithMany("GoodsIssuedGarages")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_garageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Warehouse")
                        .WithMany("GoodsIssuedWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("goodsissued_warehouseid_foreign");

                    b.Navigation("CreatedWareHouseManager");

                    b.Navigation("Garage");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsIssued", "GoodsIssued")
                        .WithMany("GoodsIssuedDetails")
                        .HasForeignKey("GoodsIssuedId")
                        .IsRequired()
                        .HasConstraintName("goodsissueddetail_goodsissuedid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtWarehouse", "ProductAtWareHouse")
                        .WithMany("GoodsIssuedDetails")
                        .HasForeignKey("ProductAtWareHouseId")
                        .IsRequired()
                        .HasConstraintName("goodsissueddetail_productatwarehouseid_foreign");

                    b.Navigation("GoodsIssued");

                    b.Navigation("ProductAtWareHouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "CreatedWarehouseManager")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("CreatedWarehouseManagerId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_createdwarehousemanagerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.SupplierContact", "SupplierContact")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("SupplierContactId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_suppliercontactid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Warehouse")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("goodsreceived_warehouseid_foreign");

                    b.Navigation("CreatedWarehouseManager");

                    b.Navigation("SupplierContact");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsReceived", "GoodsReceived")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("GoodsReceivedId")
                        .IsRequired()
                        .HasConstraintName("goodsreceiveddetail_goodsreceivedid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("GoodsReceivedDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("goodsreceiveddetail_productid_foreign");

                    b.Navigation("GoodsReceived");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Invoice", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("invoice_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("InvoiceEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("invoice_employeeid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Workplace", "Garage")
                        .WithMany("Invoices")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("invoice_garageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithOne("Invoice")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.Invoice", "Id")
                        .IsRequired()
                        .HasConstraintName("invoice_appointmentid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoicePackageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Invoice", "Invoice")
                        .WithMany("InvoicePackageDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoicepackagedetail_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("InvoicePackageDetails")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoicepackagedetail_packagehistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceSellProduct", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Invoice", "Invoice")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtGarage", "ProductAtGarage")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("InvoiceSellProducts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoicesellproduct_producthistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceServiceDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Invoice", "Invoice")
                        .WithMany("InvoiceServiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoiceservicedetail_invoiceid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ServiceHistory", "ServiceHistory")
                        .WithMany("InvoiceServiceDetails")
                        .HasForeignKey("ServiceHistoryId")
                        .IsRequired()
                        .HasConstraintName("invoiceservicedetail_servicehistoryid_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Package", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("Packages")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("package_carcategoryid_foreign");

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageCondition", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageConditions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagecondition_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("packagedetail_packagehistoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("PackageDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("packagedetail_serviceid_foreign");

                    b.Navigation("PackageHistory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageFeedBack", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("PackageFeedBacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("packagefeedback_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageFeedBacks")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagefeedback_packageid_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageHistories")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packagehistory_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageImages")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("packageimage_packageid_foreign");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CustomerCar", "CustomerCar")
                        .WithMany("PackageUsages")
                        .HasForeignKey("CustomerCarId")
                        .IsRequired()
                        .HasConstraintName("packageusage_customercarid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Invoice", "InvoiceAppointment")
                        .WithOne("PackageUsage")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.PackageUsage", "InvoiceAppointmentId")
                        .IsRequired()
                        .HasConstraintName("packageusage_invoiceappointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("PackageUsages")
                        .HasForeignKey("PackageHistoryId")
                        .IsRequired()
                        .HasConstraintName("packageusage_packagehistoryid_foreign");

                    b.Navigation("CustomerCar");

                    b.Navigation("InvoiceAppointment");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithOne("PackageUsageDetail")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.PackageUsageDetail", "AppointmentId")
                        .IsRequired()
                        .HasConstraintName("packageusagedetail_appointmentid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageUsage", "PackageUsage")
                        .WithMany("PackageUsageDetails")
                        .HasForeignKey("PackageUsageId")
                        .IsRequired()
                        .HasConstraintName("packageusagedetail_packageusageid_foreign");

                    b.Navigation("Appointment");

                    b.Navigation("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("product_brandid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("product_productcategoryid_foreign");

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtGarage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", "GoodsIssuedDetail")
                        .WithOne("ProductAtGarage")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.ProductAtGarage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("productatgarage_goodsissueddetailid_foreign");

                    b.Navigation("GoodsIssuedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWarehouse", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", "GoodsReceivedDetail")
                        .WithOne("ProductAtWarehouse")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.ProductAtWarehouse", "Id")
                        .IsRequired()
                        .HasConstraintName("productatwarehouse_goodsreceiveddetailid_foreign");

                    b.Navigation("GoodsReceivedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductHistories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("producthistory_productid_foreign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productimage_productid_foreign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ReplacementPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.InvoiceServiceDetail", "InvoiceDetail")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("InvoiceDetailId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_invoiceappointmentdetailid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtGarage", "ProductAtGarage")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("ProductAtGarageId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_productatgarageid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("ReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .IsRequired()
                        .HasConstraintName("replacementpart_producthistoryid_foreign");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("ProductAtGarage");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("Services")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("service_carcategoryid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.CarPart", "CarPart")
                        .WithMany("Services")
                        .HasForeignKey("CarPartId")
                        .IsRequired()
                        .HasConstraintName("service_carpartid_foreign");

                    b.Navigation("CarCategory");

                    b.Navigation("CarPart");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceFeedBack", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("servicefeedback_customerid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servicefeedback_serviceid_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servicehistory_serviceid_foreign");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "IdNavigation")
                        .WithOne("ServiceImage")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.ServiceImage", "Id")
                        .IsRequired()
                        .HasConstraintName("serviceimage_id_foreign");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.SupplierContact", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Supplier", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("suppliercontact_supplierid_foreign");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductCarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", null)
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("productcarmodel_carmodelid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productcarmodel_productid_foreign");
                });

            modelBuilder.Entity("ProductCarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarPart", null)
                        .WithMany()
                        .HasForeignKey("CarPartId")
                        .IsRequired()
                        .HasConstraintName("productcarpart_carpartid_foreign");

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("productcarpart_productid_foreign");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentDetailPackages");

                    b.Navigation("AppointmentDetails");

                    b.Navigation("Invoice");

                    b.Navigation("PackageUsageDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("CarConditionImages");

                    b.Navigation("EmployeeSchedules");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Brand", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarCategory", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Packages");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerCars");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPartCategory", b =>
                {
                    b.Navigation("CarParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CustomerCar", b =>
                {
                    b.Navigation("PackageUsages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssued", b =>
                {
                    b.Navigation("GoodsIssuedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.Navigation("ProductAtGarage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.Navigation("GoodsReceivedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.Navigation("ProductAtWarehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Invoice", b =>
                {
                    b.Navigation("InvoicePackageDetails");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("InvoiceServiceDetails");

                    b.Navigation("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceServiceDetail", b =>
                {
                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Package", b =>
                {
                    b.Navigation("PackageConditions");

                    b.Navigation("PackageFeedBacks");

                    b.Navigation("PackageHistories");

                    b.Navigation("PackageImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.Navigation("AppointmentDetailPackages");

                    b.Navigation("InvoicePackageDetails");

                    b.Navigation("PackageDetails");

                    b.Navigation("PackageUsages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsage", b =>
                {
                    b.Navigation("PackageUsageDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.Navigation("GoodsReceivedDetails");

                    b.Navigation("ProductHistories");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtGarage", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWarehouse", b =>
                {
                    b.Navigation("GoodsIssuedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("InvoiceSellProducts");

                    b.Navigation("ReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.Navigation("PackageDetails");

                    b.Navigation("ServiceFeedBacks");

                    b.Navigation("ServiceHistories");

                    b.Navigation("ServiceImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("InvoiceServiceDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Supplier", b =>
                {
                    b.Navigation("SupplierContacts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.SupplierContact", b =>
                {
                    b.Navigation("GoodsReceiveds");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.User", b =>
                {
                    b.Navigation("AppointmentDetailPackageUpdateByCustomers");

                    b.Navigation("AppointmentDetailPackageUpdateByEmployees");

                    b.Navigation("AppointmentDetailUpdateByCustomers");

                    b.Navigation("AppointmentDetailUpdateByEmployees");

                    b.Navigation("Appointments");

                    b.Navigation("CustomerCarCreatedByEmployees");

                    b.Navigation("CustomerCarCustomers");

                    b.Navigation("EmployeeInfo");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("GoodsIssueds");

                    b.Navigation("GoodsReceiveds");

                    b.Navigation("InvoiceCustomers");

                    b.Navigation("InvoiceEmployees");

                    b.Navigation("PackageFeedBacks");

                    b.Navigation("ServiceFeedBacks");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Workplace", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeeInfos");

                    b.Navigation("GoodsIssuedGarages");

                    b.Navigation("GoodsIssuedWarehouses");

                    b.Navigation("GoodsReceiveds");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
