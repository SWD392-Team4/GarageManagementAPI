// <auto-generated />
using System;
using GarageManagementAPI.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarageManagementAPI.Application.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarLicencePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EstimatedAppointmentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("ExpectedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("GarageId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceHistoryId");

                    b.ToTable("AppointmentDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentReplacementParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDetailId");

                    b.HasIndex("ProductHistoryId");

                    b.ToTable("AppointmentReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LinkLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarConditionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarConditionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDetailId");

                    b.ToTable("CarConditionImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModelYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarCategoryId");

                    b.ToTable("CarModel");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarPartCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CarPartCategoryId");

                    b.ToTable("CarPart");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPartCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CarPartCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CustomerCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistraionDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VehicleIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCar");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenIdentification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenIdentification")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CitizenIdentification")
                        .IsUnique();

                    b.HasIndex("GarageId");

                    b.ToTable("EmployeeInfo");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EstimatedEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeSchedule");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.FeedBackPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.ToTable("FeedBackPackage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.FeedBackService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("FeedBackService");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Garage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssued", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExportDate")
                        .HasColumnType("date");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GarageId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GoodsIssued");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsIssuedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GoodsReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtWareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GoodsIssuedId");

                    b.HasIndex("GoodsReceivedId");

                    b.HasIndex("ProductAtWareHouseId");

                    b.ToTable("GoodsIssuedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GoodsReceived");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceivedId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReceivedDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GarageId");

                    b.ToTable("InvoiceAppointment");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceDetailRepair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceAppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalReplacePartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDetailId")
                        .IsUnique();

                    b.HasIndex("AppointmentId");

                    b.HasIndex("InvoiceAppointmentId");

                    b.ToTable("InvoiceDetailRepair");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceDetailSell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSellId");

                    b.HasIndex("ProductAtStoreId");

                    b.HasIndex("ProductHistoryId");

                    b.ToTable("InvoiceDetailSell");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceReplacementParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceDetailRepairId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAtStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceDetailRepairId");

                    b.HasIndex("ProductAtStoreId");

                    b.HasIndex("ProductHistoryId");

                    b.ToTable("InvoiceReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceSell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GarageId");

                    b.ToTable("InvoiceSell");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.MaintainCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("MaintainCondition");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetailHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PackageHistoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageDetailHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("ValidityPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageProvided", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PackageHistoryId");

                    b.ToTable("PackageProvided");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCarId");

                    b.HasIndex("PackageHistoryId");

                    b.ToTable("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PackageUsageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PackageUsageId");

                    b.ToTable("PackageUsageDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarcodeAtStore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoodsIssuedDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("GoodsIssuedDetailId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAtStore");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWareHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GoodsReceivedDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceivedDetailId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAtWareHouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCarPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CarPartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarPart");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProdcutCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductForCarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarModelId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CarModelId1");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductForCarModel");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CarPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkNature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarPartId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceImage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyHotline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "2bad4a96-6dff-4fa3-9c2e-6899264fb739",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "3c5c548b-b789-41b5-b216-48ddfb5e732a",
                            Name = "Mechanic",
                            NormalizedName = "MECHANIC"
                        },
                        new
                        {
                            Id = "7d2b39a7-3d9d-4583-acd5-985611a29a5b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "b10aa072-2522-41d9-8e12-c20f28082a0e",
                            Name = "WarehouseManager",
                            NormalizedName = "WAREHOUSEMANAGER"
                        },
                        new
                        {
                            Id = "ef3629ba-332e-4c46-9fa8-54444803f925",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("Appointments")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CarModel");

                    b.Navigation("Garage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ServiceHistory", "ServiceHistory")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServiceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentReplacementParts", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("AppointmentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("AppointmentReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentDetail");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarConditionImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("CarConditionImages")
                        .HasForeignKey("AppointmentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentDetail");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Brand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("CarModels")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarPartCategory", "CarPartCategory")
                        .WithMany("CarParts")
                        .HasForeignKey("CarPartCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPartCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CustomerCar", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", "CarModel")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Employee", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany()
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeInfo", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("EmployeesInfo")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "User")
                        .WithOne("EmployeeInfo")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.EmployeeInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.EmployeeSchedule", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("AppointmentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "User")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.FeedBackPackage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("FeedBacksPackage")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("FeedBacks")
                        .HasForeignKey("PackageId");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.FeedBackService", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Customer")
                        .WithMany("FeedBacksService")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("FeedBacks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssued", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Warehouse", "Warehouse")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Garage");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsIssued", "GoodsIssued")
                        .WithMany()
                        .HasForeignKey("GoodsIssuedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsReceived", null)
                        .WithMany("GoodsIssuedDetails")
                        .HasForeignKey("GoodsReceivedId");

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtWareHouse", "ProductAtWareHouse")
                        .WithMany("GoodsIssueds")
                        .HasForeignKey("ProductAtWareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodsIssued");

                    b.Navigation("ProductAtWareHouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GarageManagementAPI.Entities.Models.Supplier", "Supplier")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Warehouse", "Warehouse")
                        .WithMany("GoodsReceiveds")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsReceived", "GoodsReceived")
                        .WithMany()
                        .HasForeignKey("GoodsReceivedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodsReceived");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceAppointment", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithOne("InvoiceAppointments")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.InvoiceAppointment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("InvoiceAppointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("InvoiceAppointments")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Employee");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceDetailRepair", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.AppointmentDetail", "AppointmentDetail")
                        .WithOne("InvoiceDetailRepair")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.InvoiceDetailRepair", "AppointmentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.InvoiceAppointment", "InvoiceAppointment")
                        .WithMany()
                        .HasForeignKey("InvoiceAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("InvoiceAppointment");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceDetailSell", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.InvoiceSell", "InvoiceSell")
                        .WithMany("InvoiceDetailSells")
                        .HasForeignKey("InvoiceSellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtStore", "ProductAtStore")
                        .WithMany("invoiceDetailSells")
                        .HasForeignKey("ProductAtStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("invoiceDetailSells")
                        .HasForeignKey("ProductHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceSell");

                    b.Navigation("ProductAtStore");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceReplacementParts", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.InvoiceDetailRepair", "InvoiceDetailRepair")
                        .WithMany("InvoiceReplacementParts")
                        .HasForeignKey("InvoiceDetailRepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductAtStore", "ProductAtStore")
                        .WithMany("InvoiceReplacementParts")
                        .HasForeignKey("ProductAtStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductHistory", "ProductHistory")
                        .WithMany("InvoiceReplacementParts")
                        .HasForeignKey("ProductHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceDetailRepair");

                    b.Navigation("ProductAtStore");

                    b.Navigation("ProductHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceSell", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", "Employee")
                        .WithMany("InvoiceSells")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("InvoiceSells")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.MaintainCondition", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("MaintainConditions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("PackageDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageDetailHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("PackageDetailHistories")
                        .HasForeignKey("PackageHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageHistory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("PackageHistories")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageHistories")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarCategory");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Package", "Package")
                        .WithMany("PackageImages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageProvided", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany("PackageProvideds")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany("PackageProvideds")
                        .HasForeignKey("PackageHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CustomerCar", "CustomerCar")
                        .WithMany()
                        .HasForeignKey("CustomerCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageHistory", "PackageHistory")
                        .WithMany()
                        .HasForeignKey("PackageHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerCar");

                    b.Navigation("PackageHistory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageUsageDetail", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Appointment", "Appointment")
                        .WithMany("PackageUsageDetails")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.PackageUsage", "PackageUsage")
                        .WithMany()
                        .HasForeignKey("PackageUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("PackageUsage");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtStore", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Garage", "Garage")
                        .WithMany("ProductAtStores")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", "GoodsIssuedDetail")
                        .WithOne("ProductAtStore")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.ProductAtStore", "GoodsIssuedDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductAtStores")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garage");

                    b.Navigation("GoodsIssuedDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWareHouse", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", "GoodsReceivedDetail")
                        .WithOne("ProductAtWareHouse")
                        .HasForeignKey("GarageManagementAPI.Entities.Models.ProductAtWareHouse", "GoodsReceivedDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductAtWareHouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodsReceivedDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCarPart", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarPart", "CarPart")
                        .WithMany("ProductCarParts")
                        .HasForeignKey("CarPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductCarParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductForCarModel", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.CarModel", null)
                        .WithMany("ProductForCarModels")
                        .HasForeignKey("CarModelId1");

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Product", null)
                        .WithMany("ProductForCarModels")
                        .HasForeignKey("ProductId1");

                    b.Navigation("CarModel");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductHistorys")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarPart", "CarPart")
                        .WithMany()
                        .HasForeignKey("CarPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPart");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.CarCategory", "CarCategory")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarCategory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceImage", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.Service", "Service")
                        .WithMany("ServiceImages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GarageManagementAPI.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("InvoiceAppointments");

                    b.Navigation("PackageProvideds");

                    b.Navigation("PackageUsageDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.AppointmentDetail", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("CarConditionImages");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("InvoiceDetailRepair");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Brand", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarCategory", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("PackageHistories");

                    b.Navigation("ServiceHistories");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarModel", b =>
                {
                    b.Navigation("CustomerCars");

                    b.Navigation("ProductForCarModels");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPart", b =>
                {
                    b.Navigation("ProductCarParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.CarPartCategory", b =>
                {
                    b.Navigation("CarParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Garage", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeesInfo");

                    b.Navigation("GoodsIssueds");

                    b.Navigation("InvoiceAppointments");

                    b.Navigation("InvoiceSells");

                    b.Navigation("ProductAtStores");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsIssuedDetail", b =>
                {
                    b.Navigation("ProductAtStore");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceived", b =>
                {
                    b.Navigation("GoodsIssuedDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.GoodsReceivedDetail", b =>
                {
                    b.Navigation("ProductAtWareHouse");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceDetailRepair", b =>
                {
                    b.Navigation("InvoiceReplacementParts");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.InvoiceSell", b =>
                {
                    b.Navigation("InvoiceDetailSells");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Package", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("MaintainConditions");

                    b.Navigation("PackageDetails");

                    b.Navigation("PackageHistories");

                    b.Navigation("PackageImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.PackageHistory", b =>
                {
                    b.Navigation("PackageDetailHistories");

                    b.Navigation("PackageProvideds");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Product", b =>
                {
                    b.Navigation("ProductAtStores");

                    b.Navigation("ProductAtWareHouses");

                    b.Navigation("ProductCarParts");

                    b.Navigation("ProductForCarModels");

                    b.Navigation("ProductHistorys");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtStore", b =>
                {
                    b.Navigation("InvoiceReplacementParts");

                    b.Navigation("invoiceDetailSells");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductAtWareHouse", b =>
                {
                    b.Navigation("GoodsIssueds");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ProductHistory", b =>
                {
                    b.Navigation("AppointmentReplacementParts");

                    b.Navigation("InvoiceReplacementParts");

                    b.Navigation("invoiceDetailSells");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Service", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("PackageDetails");

                    b.Navigation("ServiceHistories");

                    b.Navigation("ServiceImages");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.ServiceHistory", b =>
                {
                    b.Navigation("AppointmentDetails");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Supplier", b =>
                {
                    b.Navigation("GoodsReceiveds");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.User", b =>
                {
                    b.Navigation("CustomerCars");

                    b.Navigation("EmployeeInfo");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("FeedBacksPackage");

                    b.Navigation("FeedBacksService");

                    b.Navigation("GoodsIssueds");

                    b.Navigation("GoodsReceiveds");

                    b.Navigation("InvoiceAppointments");

                    b.Navigation("InvoiceSells");
                });

            modelBuilder.Entity("GarageManagementAPI.Entities.Models.Warehouse", b =>
                {
                    b.Navigation("GoodsIssueds");

                    b.Navigation("GoodsReceiveds");
                });
#pragma warning restore 612, 618
        }
    }
}
